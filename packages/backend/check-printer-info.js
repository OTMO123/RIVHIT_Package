const net = require('net');

const PRINTER_IP = '192.168.14.200';
const PRINTER_PORT = 9101;

console.log(`–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ ${PRINTER_IP}:${PRINTER_PORT}...`);
console.log('');

function sendCommand(command, description) {
    return new Promise((resolve) => {
        const client = new net.Socket();
        let response = '';
        
        client.setTimeout(2000);
        
        client.connect(PRINTER_PORT, PRINTER_IP, function() {
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: ${description}`);
            client.write(command + '\r\n');
        });
        
        client.on('data', function(data) {
            response += data.toString();
        });
        
        client.on('timeout', function() {
            client.end();
        });
        
        client.on('close', function() {
            if (response) {
                console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${response.substring(0, 100)}`);
            } else {
                console.log('‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞');
            }
            console.log('');
            resolve();
        });
        
        client.on('error', function(err) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
            console.log('');
            resolve();
        });
    });
}

async function checkPrinter() {
    // –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    await sendCommand('~!@', 'EZPL - –ó–∞–ø—Ä–æ—Å –≤–µ—Ä—Å–∏–∏');
    await sendCommand('~!S', 'EZPL - –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞');
    await sendCommand('~!I', 'EZPL - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ');
    await sendCommand('^II', 'ZPL - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
    await sendCommand('~HS', 'ZPL - –°—Ç–∞—Ç—É—Å');
    await sendCommand('STATUS', 'TSPL - –°—Ç–∞—Ç—É—Å');
    await sendCommand('SELFTEST', 'TSPL - –°–∞–º–æ—Ç–µ—Å—Ç');
    
    console.log('=== –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ===');
    console.log('–ï—Å–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Programming Language –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–∞');
    console.log('2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Auto-detect —Ä–µ–∂–∏–º –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ Factory Reset –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Firmware –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ—Ç–µ–≤—É—é –ø–µ—á–∞—Ç—å');
}

checkPrinter();