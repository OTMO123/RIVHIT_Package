const net = require('net');
const fs = require('fs');

// Dynamic import for Jimp
let Jimp;
(async () => {
  const jimpModule = await import('jimp');
  Jimp = jimpModule.default;
})();

const PRINTER_IP = '192.168.14.200';
const PRINTER_PORT = 9101;

// –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
const imagePath = process.argv[2] || '/Users/user/Desktop/Projects/RIVHIT_Package/packages/backend/temp-labels/order_label_box1_1755869546873.png';

console.log('üñºÔ∏è Converting image to GoDEX format:', imagePath);

async function imageToZPL() {
  try {
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Jimp
    if (!Jimp) {
      const jimpModule = await import('jimp');
      Jimp = jimpModule.default;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const image = await Jimp.read(imagePath);
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥ –ø—Ä–∏–Ω—Ç–µ—Ä (80x50mm –ø—Ä–∏ 203dpi = 640x400px)
    image.resize(640, 400);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ
    image.greyscale();
    image.contrast(1); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    
    // –ü–æ–ª—É—á–∞–µ–º bitmap –¥–∞–Ω–Ω—ã–µ
    const width = image.bitmap.width;
    const height = image.bitmap.height;
    const bytesPerRow = Math.ceil(width / 8);
    
    console.log(`üìê Image size: ${width}x${height}px`);
    console.log(`üìä Bytes per row: ${bytesPerRow}`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ hex –¥–∞–Ω–Ω—ã–µ –¥–ª—è ZPL
    let hexData = '';
    
    for (let y = 0; y < height; y++) {
      let rowData = [];
      
      for (let byteIndex = 0; byteIndex < bytesPerRow; byteIndex++) {
        let byte = 0;
        
        for (let bit = 0; bit < 8; bit++) {
          const x = byteIndex * 8 + bit;
          
          if (x < width) {
            const idx = image.getPixelIndex(x, y);
            const brightness = image.bitmap.data[idx]; // Grayscale, so R=G=B
            
            // –ï—Å–ª–∏ —Ç–µ–º–Ω—ã–π –ø–∏–∫—Å–µ–ª—å (< 128), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏—Ç
            if (brightness < 128) {
              byte |= (1 << (7 - bit));
            }
          }
        }
        
        rowData.push(byte.toString(16).padStart(2, '0').toUpperCase());
      }
      
      hexData += rowData.join('');
    }
    
    console.log(`üíæ Generated ${hexData.length} hex characters`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è GoDEX –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    const totalBytes = bytesPerRow * height;
    
    // GoDEX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç - –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    console.log('\nüîß Trying different formats...');
    
    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ß–∏—Å—Ç—ã–π ZPL –±–µ–∑ escape-—Å–∏–º–≤–æ–ª–æ–≤
    let zpl = '';
    zpl += '^XA\r\n';  // –ù–∞—á–∞–ª–æ —Å CRLF
    zpl += '^FO0,0\r\n';
    zpl += '^GFA,' + totalBytes + ',' + totalBytes + ',' + bytesPerRow + ',' + hexData + '\r\n';
    zpl += '^FS\r\n';
    zpl += '^XZ\r\n';  // –ö–æ–Ω–µ—Ü —Å CRLF
    
    console.log('üìù Command length:', zpl.length);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const cmdPath = imagePath.replace('.png', '.txt');
    fs.writeFileSync(cmdPath, zpl);
    console.log('üíæ Command saved to:', cmdPath);
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    console.log('\nüöÄ Testing multiple send methods...');
    
    // –ú–µ—Ç–æ–¥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –µ—Å—Ç—å
    await sendToPrinter(zpl, 'Method 1: Raw ZPL');
    
    // –ú–µ—Ç–æ–¥ 2: –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥–ª—è GoDEX
    const godexCommand = '~DG' + hexData + '\r\n';
    await sendToPrinter(godexCommand, 'Method 2: GoDEX DG command');
    
    // –ú–µ—Ç–æ–¥ 3: EZPL —Ñ–æ—Ä–º–∞—Ç –¥–ª—è GoDEX
    const ezpl = createEZPLCommand(width, height, hexData);
    await sendToPrinter(ezpl, 'Method 3: EZPL format');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Error converting image:', error);
  }
}

function sendToPrinter(command, method = 'Default') {
  return new Promise((resolve) => {
    const client = new net.Socket();
    
    console.log(`\nüì° ${method} - Connecting...`);
    
    client.connect(PRINTER_PORT, PRINTER_IP, () => {
      console.log(`‚úÖ ${method} - Connected`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
      client.write(command);
      
      setTimeout(() => {
        client.end();
        console.log(`üì§ ${method} - Sent`);
        resolve(true);
      }, 1500);
    });
    
    client.on('error', (err) => {
      console.error(`‚ùå ${method} - Error:`, err.message);
      resolve(false);
    });
    
    client.on('timeout', () => {
      console.error(`‚è±Ô∏è ${method} - Timeout`);
      client.destroy();
      resolve(false);
    });
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ EZPL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è GoDEX
function createEZPLCommand(width, height, hexData) {
  let ezpl = '';
  
  // EZPL –∑–∞–≥–æ–ª–æ–≤–æ–∫
  ezpl += '^Q50,3\r\n';     // –î–ª–∏–Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–∏
  ezpl += '^W80\r\n';       // –®–∏—Ä–∏–Ω–∞
  ezpl += '^H10\r\n';       // –°–∫–æ—Ä–æ—Å—Ç—å
  ezpl += '^P1\r\n';        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
  ezpl += '^S2\r\n';        // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
  ezpl += '^L\r\n';         // –ù–∞—á–∞–ª–æ
  
  // –ì—Ä–∞—Ñ–∏–∫–∞ –≤ EZPL —Ñ–æ—Ä–º–∞—Ç–µ
  ezpl += 'GM"GRAPHIC",' + hexData.length + '\r\n';
  ezpl += hexData + '\r\n';
  ezpl += 'GG50,50,"GRAPHIC"\r\n';
  
  ezpl += 'E\r\n';          // –ö–æ–Ω–µ—Ü
  
  return ezpl;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏ –ø–µ—á–∞—Ç—å
imageToZPL()
  .then(() => {
    console.log('\n‚ú® All methods tested! Check your printer.');
    console.log('\nüìå If nothing printed, try:');
    console.log('1. Check printer status and connection');
    console.log('2. Verify printer is in correct mode (ZPL/EPL/EZPL)');
    console.log('3. Try the simple test script: node print-label-image.js');
  })
  .catch((error) => {
    console.error('\n‚ùå Failed:', error);
  });