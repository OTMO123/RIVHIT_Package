const net = require('net');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

const PRINTER_IP = '192.168.14.200';
const PRINTER_PORT = 9101;

// –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —ç—Ç–∏–∫–µ—Ç–∫–∏
const labelPath = process.argv[2] || '/Users/user/Desktop/Projects/RIVHIT_Package/packages/backend/temp-labels/order_label_box1_1755869546873.png';

console.log('üñ®Ô∏è Printing label image:', labelPath);

// –ú–µ—Ç–æ–¥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ RAW –¥–∞–Ω–Ω—ã—Ö
function printRawImage() {
  console.log('\n1Ô∏è‚É£ Trying RAW image printing...');
  
  if (!fs.existsSync(labelPath)) {
    console.error('‚ùå File not found:', labelPath);
    return;
  }

  // –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const imageBuffer = fs.readFileSync(labelPath);
  
  const client = new net.Socket();
  
  client.connect(PRINTER_PORT, PRINTER_IP, () => {
    console.log('‚úÖ Connected to printer');
    
    // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
    client.write(imageBuffer);
    
    setTimeout(() => {
      client.end();
      console.log('üì§ Raw image data sent');
    }, 2000);
  });
  
  client.on('error', (err) => {
    console.error('‚ùå Error:', err.message);
  });
}

// –ú–µ—Ç–æ–¥ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ EZPL –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function printWithEZPL() {
  console.log('\n2Ô∏è‚É£ Trying EZPL image printing...');
  
  const client = new net.Socket();
  
  client.connect(PRINTER_PORT, PRINTER_IP, () => {
    console.log('‚úÖ Connected for EZPL');
    
    // EZPL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const commands = [
      '^Q50,3',     // –î–ª–∏–Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–∏
      '^W80',       // –®–∏—Ä–∏–Ω–∞
      '^H10',       // –°–∫–æ—Ä–æ—Å—Ç—å
      '^P1',        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π
      '^S2',        // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
      '^C1',        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π
      '^L',         // –ù–∞—á–∞–ª–æ —ç—Ç–∏–∫–µ—Ç–∫–∏
      'Y50,50,"' + labelPath + '"', // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—á–∞—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      'E'           // –ö–æ–Ω–µ—Ü
    ].join('\n');
    
    client.write(commands);
    
    setTimeout(() => {
      client.end();
      console.log('üì§ EZPL commands sent');
    }, 1000);
  });
  
  client.on('error', (err) => {
    console.error('‚ùå EZPL Error:', err.message);
  });
}

// –ú–µ—Ç–æ–¥ 3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PCX —Ñ–æ—Ä–º–∞—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –º–Ω–æ–≥–∏–º–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏)
function printPCX() {
  console.log('\n3Ô∏è‚É£ Converting to PCX and printing...');
  
  // –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω ImageMagick –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
  const pcxPath = labelPath.replace('.png', '.pcx');
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ ImageMagick –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  exec(`convert "${labelPath}" -monochrome -resize 640x400 "${pcxPath}"`, (error, stdout, stderr) => {
    if (error) {
      console.log('‚ö†Ô∏è ImageMagick not available, skipping PCX conversion');
      return;
    }
    
    console.log('‚úÖ Converted to PCX:', pcxPath);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PCX —Ñ–∞–π–ª
    const pcxData = fs.readFileSync(pcxPath);
    
    const client = new net.Socket();
    client.connect(PRINTER_PORT, PRINTER_IP, () => {
      console.log('üì° Sending PCX data...');
      
      // EZPL –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è PCX
      const header = '^L\nY50,50,P,"' + path.basename(pcxPath) + '"\nE\n';
      client.write(header);
      client.write(pcxData);
      
      setTimeout(() => {
        client.end();
        console.log('‚úÖ PCX sent');
      }, 2000);
    });
    
    client.on('error', (err) => {
      console.error('‚ùå PCX Error:', err.message);
    });
  });
}

// –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ—Å—Ç–∞—è ZPL —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —ç—Ç–∏–∫–µ—Ç–∫–∏
function printSimpleZPL() {
  console.log('\n4Ô∏è‚É£ Printing simple ZPL label...');
  
  const client = new net.Socket();
  
  client.connect(PRINTER_PORT, PRINTER_IP, () => {
    console.log('‚úÖ Connected for ZPL');
    
    // –ü—Ä–æ—Å—Ç–∞—è ZPL —ç—Ç–∏–∫–µ—Ç–∫–∞
    const zpl = [
      '^XA',
      '^FO50,50',
      '^A0N,40,40',
      '^FDBox Label^FS',
      '^FO50,120',
      '^A0N,25,25',
      '^FDOrder #39344^FS',
      '^FO50,170',
      '^BY2,3,70',
      '^BCN,,Y,N',
      '^FD39344^FS',
      '^FO50,280',
      '^A0N,20,20',
      '^FDPrinted from saved image^FS',
      '^XZ'
    ].join('\n');
    
    console.log('üì§ Sending ZPL:', zpl);
    client.write(zpl);
    
    setTimeout(() => {
      client.end();
      console.log('‚úÖ ZPL sent');
    }, 1000);
  });
  
  client.on('error', (err) => {
    console.error('‚ùå ZPL Error:', err.message);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
console.log('üöÄ Starting print tests...\n');

// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π ZPL (—á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç)
printSimpleZPL();

setTimeout(() => {
  // –ü–æ—Ç–æ–º –ø—Ä–æ–±—É–µ–º RAW –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  printRawImage();
}, 3000);

setTimeout(() => {
  // –ü–æ—Ç–æ–º EZPL
  printWithEZPL();
}, 6000);

setTimeout(() => {
  // –ò –Ω–∞–∫–æ–Ω–µ—Ü PCX
  printPCX();
}, 9000);

console.log('\nüìå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...');