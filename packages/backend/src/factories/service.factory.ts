import { ICacheService } from '../interfaces/ICacheService';
import { IPrinterService } from '../interfaces/IPrinterService';
import { IRivhitService } from '../interfaces/IRivhitService';
import { MemoryCacheService } from '../services/cache/memory.cache.service';
import { RedisCacheService } from '../services/cache/redis.cache.service';
import { PrinterService } from '../services/printer.service';
import { ZPLPrinterService } from '../services/zpl-printer.service';
import { WinLabelPrinterService, WinLabelPrinterFactory } from '../services/winlabel-printer.service';
import { RivhitService } from '../services/rivhit.service';
import { MockRivhitService } from '../services/mock-rivhit.service';
import { SafeRivhitService } from '../services/safe-rivhit.service';

/**
 * Service Factory —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID
 * 
 * Factory Pattern –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
 * - Encapsulation: –°–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 * - Loose Coupling: –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
 * - Single Responsibility: –§–∞–±—Ä–∏–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
 * - Open/Closed: –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã —Å–µ—Ä–≤–∏—Å–æ–≤
 */

// Cache Service Factory
export enum CacheType {
  MEMORY = 'memory',
  REDIS = 'redis'
}

export interface CacheConfig {
  type: CacheType;
  redis?: {
    host: string;
    port: number;
    password?: string;
    database?: number;
    keyPrefix?: string;
  };
}

export class CacheServiceFactory {
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à-—Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   * –°–ª–µ–¥—É–µ—Ç Open/Closed Principle - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
   */
  static create(config: CacheConfig): ICacheService {
    switch (config.type) {
      case CacheType.MEMORY:
        return new MemoryCacheService();
      
      case CacheType.REDIS:
        return new RedisCacheService(config.redis);
      
      default:
        throw new Error(`Unsupported cache type: ${config.type}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à-—Å–µ—Ä–≤–∏—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   * Dependency Inversion - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—é, –∞ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª–∞—Å—Å
   */
  static createDefault(): ICacheService {
    const cacheType = process.env.CACHE_TYPE as CacheType || CacheType.MEMORY;
    
    const config: CacheConfig = {
      type: cacheType,
      redis: {
        host: process.env.REDIS_HOST || 'localhost',
        port: parseInt(process.env.REDIS_PORT || '6379'),
        password: process.env.REDIS_PASSWORD,
        database: parseInt(process.env.REDIS_DB || '0'),
        keyPrefix: process.env.REDIS_PREFIX || 'rivhit:'
      }
    };

    return this.create(config);
  }
}

// Printer Service Factory
export interface PrinterConfig {
  templatesPath?: string;
  connectionType?: 'usb' | 'serial' | 'ethernet';
  port?: string;
}

export class PrinterServiceFactory {
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä-—Å–µ—Ä–≤–∏—Å–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
   * Single Responsibility - –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ PrinterService
   */
  static create(config: PrinterConfig = {}): IPrinterService {
    return new PrinterService(config.templatesPath);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ WinLabel –ø—Ä–∏–Ω—Ç–µ—Ä-—Å–µ—Ä–≤–∏—Å–∞
   * –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WINCODE Technology WinLabel
   */
  static createWinLabel(config?: {
    winLabelPath?: string;
    templatesPath?: string;
    dataPath?: string;
  }): IPrinterService {
    return WinLabelPrinterFactory.create(config);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ WinLabel –ø—Ä–∏–Ω—Ç–µ—Ä-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è RIVHIT
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è RIVHIT —Å–∏—Å—Ç–µ–º—ã
   */
  static createWinLabelForRivhit(): IPrinterService {
    return WinLabelPrinterFactory.createForRivhit();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ ZPL –ø—Ä–∏–Ω—Ç–µ—Ä-—Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è GoDEX —Å ZPL)
   */
  static createZPL(): IPrinterService {
    return new ZPLPrinterService();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä-—Å–µ—Ä–≤–∏—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  static createDefault(): IPrinterService {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ZPL –¥–ª—è GoDEX –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    if (process.env.USE_ZPL === 'true' || true) { // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ZPL
      console.log('üñ®Ô∏è Using ZPL printer service for GoDEX');
      return this.createZPL();
    }

    const config: PrinterConfig = {
      templatesPath: process.env.PRINTER_TEMPLATES_PATH || './printer-templates',
      connectionType: (process.env.PRINTER_CONNECTION_TYPE as any) || 'usb',
      port: process.env.PRINTER_PORT || 'COM1'
    };

    // –ï—Å–ª–∏ WinLabel –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (process.env.USE_WINLABEL === 'true') {
      return this.createWinLabelForRivhit();
    }

    return this.create(config);
  }
}

// RIVHIT Service Factory
export interface RivhitConfig {
  baseUrl: string;
  apiToken: string;
  timeout?: number;
  retryAttempts?: number;
  testMode?: boolean;
}

export class RivhitServiceFactory {
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ RIVHIT —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   * Dependency Injection - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ICacheService –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
   */
  static create(config: RivhitConfig, cacheService: ICacheService): IRivhitService {
    const serviceConfig = {
      baseUrl: config.baseUrl,
      apiToken: config.apiToken,
      timeout: config.timeout || 60000, // Increased to 60s for slow RIVHIT API
      retryAttempts: config.retryAttempts || 3,
      testMode: config.testMode || false
    };

    return new RivhitService(serviceConfig, cacheService) as IRivhitService;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ RIVHIT —Å–µ—Ä–≤–∏—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫—ç—à–µ–º
   */
  static createDefault(): IRivhitService {
    // Debug environment variables
    console.log('üîç RIVHIT Service Selection Debug:', {
      USE_MOCK_RIVHIT: process.env.USE_MOCK_RIVHIT,
      NODE_ENV: process.env.NODE_ENV,
      RIVHIT_API_TOKEN: process.env.RIVHIT_API_TOKEN ? '***SET***' : 'NOT_SET'
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Mock —Å–µ—Ä–≤–∏—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –µ—Å–ª–∏ API token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ
    const useMock = process.env.USE_MOCK_RIVHIT === 'true' || 
                    process.env.NODE_ENV === 'test' ||
                    !process.env.RIVHIT_API_TOKEN ||
                    process.env.RIVHIT_API_TOKEN === 'mock_token_for_development';
    
    if (useMock) {
      console.log('üß™ Using Mock RIVHIT service for development');
      return new MockRivhitService();
    }
    
    console.log('üîó Using Real SafeRivhitService with production API');

    const config = {
      baseUrl: process.env.RIVHIT_API_URL || 'https://api.rivhit.com',
      apiToken: process.env.RIVHIT_API_TOKEN || '',
      timeout: parseInt(process.env.RIVHIT_TIMEOUT || '60000'), // Increased to 60s for very slow RIVHIT API responses
      retryAttempts: parseInt(process.env.RIVHIT_RETRY_ATTEMPTS || '3'),
      testMode: process.env.NODE_ENV === 'test' || process.env.RIVHIT_TEST_MODE === 'true'
    };

    const cacheService = CacheServiceFactory.createDefault();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SafeRivhitService –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    return new SafeRivhitService(config, cacheService) as IRivhitService;
  }
}

// Application Service Factory (Facade Pattern)
export interface ApplicationServices {
  cacheService: ICacheService;
  printerService: IPrinterService;
  rivhitService: IRivhitService;
}

export class ApplicationServiceFactory {
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   * Facade Pattern - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   * Dependency Injection - –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   */
  static createServices(): ApplicationServices {
    console.log('üè≠ Creating application services...');

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à-—Å–µ—Ä–≤–∏—Å–∞
    const cacheService = CacheServiceFactory.createDefault();
    console.log('‚úÖ Cache service created');

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä-—Å–µ—Ä–≤–∏—Å–∞
    const printerService = PrinterServiceFactory.createDefault();
    console.log('‚úÖ Printer service created');

    // –°–æ–∑–¥–∞–Ω–∏–µ RIVHIT —Å–µ—Ä–≤–∏—Å–∞ —Å –∫—ç—à–µ–º
    const rivhitService = RivhitServiceFactory.createDefault();
    console.log('‚úÖ RIVHIT service created');

    console.log('üéâ All services created successfully');

    return {
      cacheService,
      printerService,
      rivhitService
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * Test Double Pattern - —Å–æ–∑–¥–∞–µ—Ç mock —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
   */
  static createTestServices(): ApplicationServices {
    console.log('üß™ Creating test services...');

    const cacheService = new MemoryCacheService(); // –í—Å–µ–≥–¥–∞ Memory –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    const printerService = PrinterServiceFactory.create({ templatesPath: './test-templates' });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º MockRivhitService –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
    const rivhitService = new MockRivhitService();
    console.log('‚úÖ Mock RIVHIT service created for testing');

    return {
      cacheService,
      printerService,
      rivhitService: rivhitService as IRivhitService
    };
  }

  /**
   * Graceful shutdown –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  static async shutdownServices(services: ApplicationServices): Promise<void> {
    console.log('üõë Shutting down services...');

    try {
      // –ó–∞–∫—Ä—ã—Ç–∏–µ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      if (services.cacheService instanceof RedisCacheService) {
        await (services.cacheService as RedisCacheService).disconnect();
        console.log('‚úÖ Redis cache disconnected');
      }

      // –û—á–∏—Å—Ç–∫–∞ memory cache
      if (services.cacheService instanceof MemoryCacheService) {
        await services.cacheService.clear();
        console.log('‚úÖ Memory cache cleared');
      }

      console.log('üéâ All services shut down successfully');
    } catch (error) {
      console.error('‚ùå Error during service shutdown:', error);
      throw error;
    }
  }
}