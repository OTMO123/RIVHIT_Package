import sharp from 'sharp';
import * as net from 'net';
import * as fs from 'fs';
import * as path from 'path';

export class ImagePrintService {
  private printerIP: string = '192.168.14.200';
  private printerPort: number = 9101;

  /**
   * –ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–æ–∫ –∫–æ—Ä–æ–±–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
   */
  async printBoxLabelsWithImages(labels: Array<{ boxNumber: number; imageData: string; items?: any[] }>): Promise<any> {
    console.log(`üñ®Ô∏è Printing ${labels.length} box labels with images...`);
    
    let printedCount = 0;
    const results = [];

    for (const label of labels) {
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        const tempPath = await this.saveImageToTemp(label.imageData, label.boxNumber);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø–µ—á–∞—Ç–∞–µ–º
        const success = await this.printImage(tempPath);
        
        if (success) {
          printedCount++;
          console.log(`‚úÖ Printed box ${label.boxNumber}`);
        }
        
        results.push({
          boxNumber: label.boxNumber,
          success,
          itemsCount: label.items?.length || 0
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if (fs.existsSync(tempPath)) {
          fs.unlinkSync(tempPath);
        }
      } catch (error) {
        console.error(`‚ùå Error printing box ${label.boxNumber}:`, error);
        results.push({
          boxNumber: label.boxNumber,
          success: false,
          error: error instanceof Error ? error.message : String(error)
        });
      }
    }

    return {
      success: printedCount > 0,
      printedCount,
      results
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
   */
  private async saveImageToTemp(base64Data: string, boxNumber: number): Promise<string> {
    const base64Image = base64Data.replace(/^data:image\/\w+;base64,/, '');
    const buffer = Buffer.from(base64Image, 'base64');
    
    const tempDir = path.join(process.cwd(), 'temp-labels');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    const tempPath = path.join(tempDir, `box_${boxNumber}_${Date.now()}.png`);
    fs.writeFileSync(tempPath, buffer);
    
    return tempPath;
  }

  /**
   * –ü–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ GoDEX –ø—Ä–∏–Ω—Ç–µ—Ä–µ
   */
  private async printImage(imagePath: string): Promise<boolean> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫—É (80x50mm –ø—Ä–∏ 203dpi = 640x400px)
      const imageBuffer = await sharp(imagePath)
        .resize(640, 640, { 
          fit: 'contain', 
          background: { r: 255, g: 255, b: 255 },
          position: 'center' // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        })
        .threshold(128)
        .raw()
        .toBuffer({ resolveWithObject: true });
      
      const { data, info } = imageBuffer;
      const width = info.width;
      const height = info.height;
      const bytesPerRow = Math.ceil(width / 8);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ hex
      let hexData = '';
      for (let y = 0; y < height; y++) {
        for (let byteX = 0; byteX < bytesPerRow; byteX++) {
          let byte = 0;
          for (let bit = 0; bit < 8; bit++) {
            const x = byteX * 8 + bit;
            if (x < width) {
              const pixelIndex = (y * width + x) * info.channels;
              if (data[pixelIndex] < 128) {
                byte |= (0x80 >> bit);
              }
            }
          }
          hexData += byte.toString(16).padStart(2, '0').toUpperCase();
        }
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º ZPL –∫–æ–º–∞–Ω–¥—É (–º–µ—Ç–æ–¥ 1 - –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç)
      // ^FO20,20 - —Å–º–µ—â–∞–µ–º –Ω–∞ 20 —Ç–æ—á–µ–∫ –æ—Ç –ª–µ–≤–æ–≥–æ –∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const totalBytes = bytesPerRow * height;
      const zplCommand = `^XA^FO20,20^GFA,${totalBytes},${totalBytes},${bytesPerRow},${hexData}^XZ`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä
      return await this.sendToPrinter(zplCommand);
      
    } catch (error) {
      console.error('Error converting image:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä
   */
  private async sendToPrinter(command: string): Promise<boolean> {
    return new Promise((resolve) => {
      const client = new net.Socket();
      
      client.connect(this.printerPort, this.printerIP, () => {
        console.log('üì° Sending to printer...');
        
        client.write(Buffer.from(command));
        
        setTimeout(() => {
          client.end();
          resolve(true);
        }, 1000);
      });
      
      client.on('error', (err) => {
        console.error('‚ùå Printer connection error:', err.message);
        resolve(false);
      });
      
      client.on('timeout', () => {
        client.destroy();
        resolve(false);
      });
    });
  }
}

export default ImagePrintService;