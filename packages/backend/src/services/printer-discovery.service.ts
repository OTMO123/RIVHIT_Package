/**
 * Printer Discovery Service - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ GoDEX –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ —Å–µ—Ç–∏
 */

import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

export interface PrinterInfo {
  ip: string;
  port: number;
  status: 'connected' | 'error';
  model?: string;
  responseTime?: number;
}

export class PrinterDiscoveryService {
  private static readonly GODEX_PORTS = [9100, 9101, 9102];
  private static readonly TIMEOUT_MS = 2000;

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ GoDEX –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
   */
  public async findGoDEXPrinters(): Promise<PrinterInfo[]> {
    try {
      const localNetwork = await this.getLocalNetwork();
      console.log(`üîç –ü–æ–∏—Å–∫ GoDEX –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ —Å–µ—Ç–∏ ${localNetwork}...`);
      
      const results: PrinterInfo[] = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
      const commonIPs = this.generatePrinterIPs(localNetwork);
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö IP –∏ –ø–æ—Ä—Ç–æ–≤
      const promises = commonIPs.flatMap(ip => 
        PrinterDiscoveryService.GODEX_PORTS.map(port => 
          this.testPrinterConnection(ip, port)
        )
      );
      
      const testResults = await Promise.allSettled(promises);
      
      for (const result of testResults) {
        if (result.status === 'fulfilled' && result.value) {
          results.push(result.value);
        }
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
      results.sort((a, b) => (a.responseTime || 999) - (b.responseTime || 999));
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} GoDEX –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤`);
      return results;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
   */
  public async testPrinter(ip: string, port: number = 9101): Promise<PrinterInfo | null> {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º IP —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä 192.168.014.200)
    const normalizedIP = this.normalizeIPAddress(ip);
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞: ${ip} ‚Üí ${normalizedIP}:${port}`);
    
    return this.testPrinterConnection(normalizedIP, port);
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è IP –∞–¥—Ä–µ—Å–∞ (—É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã netcat)
   */
  private normalizeIPAddress(ip: string): string {
    try {
      const octets = ip.split('.');
      if (octets.length !== 4) {
        console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å IP ${ip}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å`);
        return ip;
      }
      
      const normalizedOctets = octets.map(octet => {
        const parsed = parseInt(octet, 10);
        if (isNaN(parsed)) {
          throw new Error(`Invalid octet: ${octet}`);
        }
        return parsed.toString();
      });
      
      return normalizedOctets.join('.');
    } catch (error) {
      console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å IP ${ip}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å`);
      return ip;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å
   */
  private async getLocalNetwork(): Promise<string> {
    try {
      const { stdout } = await execAsync("ifconfig | grep 'inet ' | grep -v '127.0.0.1' | head -1");
      const match = stdout.match(/inet (\d+\.\d+\.\d+)\.\d+/);
      
      if (match) {
        return match[1]; // –ù–∞–ø—Ä–∏–º–µ—Ä: 192.168.14
      }
      
      return '192.168.1'; // Fallback
    } catch (error) {
      console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º 192.168.1');
      return '192.168.1';
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ IP –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  private generatePrinterIPs(network: string): string[] {
    // –¢–∏–ø–∏—á–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    const commonEndings = [
      1, 2, 10, 11, 20, 50, 100, 101, 102, 110, 111, 
      150, 200, 201, 210, 220, 250, 254
    ];
    
    return commonEndings.map(ending => `${network}.${ending}`);
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  private async testPrinterConnection(ip: string, port: number): Promise<PrinterInfo | null> {
    const startTime = Date.now();
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–æ—á–Ω—ã–π —Å–ø–æ—Å–æ–± —á—Ç–æ –∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
      const { stdout, stderr } = await execAsync(
        `nc -z -v ${ip} ${port}`,
        { timeout: PrinterDiscoveryService.TIMEOUT_MS }
      );
      
      const responseTime = Date.now() - startTime;
      const output = stdout + stderr;
      
      console.log(`üîç –¢–µ—Å—Ç ${ip}:${port} - output: ${output.trim()}`);
      
      // –¢–æ—á–Ω–æ —Ç–∞–∫–∞—è –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
      if (output.includes('succeeded')) {
        console.log(`‚úÖ –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω: ${ip}:${port}`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        const model = await this.detectPrinterModel(ip, port);
        
        return {
          ip,
          port,
          status: 'connected',
          model: model || 'GoDEX Label Printer',
          responseTime
        };
      }
      
      console.log(`‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: ${ip}:${port}`);
      return null;
      
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${ip}:${port}:`, error);
      return null;
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
   */
  private async detectPrinterModel(ip: string, port: number): Promise<string | undefined> {
    try {
      // –î–ª—è GoDEX –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–ª–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç—É—Å–∞
      const { stdout } = await execAsync(
        `echo "~!T" | timeout 1 nc ${ip} ${port}`,
        { timeout: 1000 }
      );
      
      if (stdout.includes('GoDEX') || stdout.includes('GODEX')) {
        return 'GoDEX Label Printer';
      }
      
      return 'Unknown Label Printer';
      
    } catch (error) {
      return undefined;
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥—Å–µ—Ç–∏
   */
  public async quickScan(): Promise<PrinterInfo[]> {
    console.log('‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ GoDEX –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const knownPrinters = [
      '192.168.14.200', // –ò–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP
      '192.168.014.200' // –í–µ—Ä—Å–∏—è —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
    ];
    
    const results: PrinterInfo[] = [];
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    for (const ip of knownPrinters) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞: ${ip}`);
      for (const port of PrinterDiscoveryService.GODEX_PORTS) {
        const printer = await this.testPrinterConnection(this.normalizeIPAddress(ip), port);
        if (printer) {
          results.push(printer);
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∏–Ω—Ç–µ—Ä: ${printer.ip}:${printer.port}`);
          break; // –ù–∞–π–¥–µ–Ω –ø—Ä–∏–Ω—Ç–µ—Ä, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É IP
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    if (results.length === 0) {
      const localNetwork = await this.getLocalNetwork();
      console.log(`üåê –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: ${localNetwork}.x`);
      
      const quickIPs = [
        `${localNetwork}.200`,
        `${localNetwork}.100`,
        `${localNetwork}.101`,
        `${localNetwork}.1`,
        `${localNetwork}.10`
      ];
      
      for (const ip of quickIPs) {
        for (const port of PrinterDiscoveryService.GODEX_PORTS) {
          const printer = await this.testPrinterConnection(ip, port);
          if (printer) {
            results.push(printer);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∏–Ω—Ç–µ—Ä –≤ —Å–µ—Ç–∏: ${printer.ip}:${printer.port}`);
          }
        }
      }
    }
    
    console.log(`üèÅ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: ${results.length}`);
    return results;
  }
}

export const printerDiscoveryService = new PrinterDiscoveryService();