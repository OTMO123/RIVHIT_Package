import { IPrinterService } from '../interfaces/IPrinterService';
import { PackingItem } from '@packing/shared';
import { exec } from 'child_process';
import { promisify } from 'util';
import * as fs from 'fs/promises';
import * as path from 'path';

const execAsync = promisify(exec);

export interface PrintJobOptions {
  copies?: number;
  labelSize?: 'small' | 'medium' | 'large';
  includeBarcodes?: boolean;
  includeText?: boolean;
  includeQuantity?: boolean;
  includePrices?: boolean;
  connectionType?: 'usb' | 'serial' | 'ethernet';
  port?: string; // COM1, COM2, –∏–ª–∏ IP –∞–¥—Ä–µ—Å
}

export interface PrintJobResult {
  success: boolean;
  jobId?: string;
  error?: string;
  printedItems: number;
  estimatedTime?: number;
  ezplCommands?: string[];
}

export interface LabelData {
  item: PackingItem;
  barcode?: string;
  qrCode?: string;
  customText?: string;
  stickerType: string;
  ezplTemplate?: string;
}

export interface GoDEXPrinterStatus {
  connected: boolean;
  model: string;
  paperLevel: number;
  ribbonLevel: number;
  temperature: number;
  lastError?: string;
  isReady: boolean;
}

/**
 * GoDEX ZX420 Printer Service —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π EZPL
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç USB, Serial –∏ Ethernet –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export class PrinterService implements IPrinterService {
  private isConnected: boolean = false;
  private printerModel: string = 'GoDEX ZX420';
  private supportedFormats: string[] = ['barcode', 'qr', 'text', 'ezpl'];
  private connectionType: 'usb' | 'serial' | 'ethernet' = 'usb';
  private port: string = 'COM1';
  private templatesPath: string;
  private jobQueue: Map<string, PrintJobResult> = new Map();
  private config: any = null;

  constructor(templatesPath: string = './printer-templates') {
    this.templatesPath = templatesPath;
    this.loadConfiguration();
  }

  private async loadConfiguration(): Promise<void> {
    try {
      const configPath = path.join(process.cwd(), 'printer-config.json');
      const configFile = await fs.readFile(configPath, 'utf-8');
      this.config = JSON.parse(configFile);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      if (this.config.printer) {
        this.printerModel = this.config.printer.name || this.printerModel;
        this.connectionType = this.config.printer.connection_type?.toLowerCase() || this.connectionType;
        this.port = this.config.printer.port || this.port;
      }
      
      console.log('‚úÖ Printer configuration loaded successfully');
      console.log(`üìã Model: ${this.printerModel}, Connection: ${this.connectionType}, Port: ${this.port}`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Could not load printer-config.json, using defaults:', error instanceof Error ? error.message : String(error));
    }
  }

  async initialize(options: PrintJobOptions = {}): Promise<boolean> {
    try {
      console.log('üñ®Ô∏è Initializing GoDEX ZX420 printer service...');
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (options.connectionType) {
        this.connectionType = options.connectionType;
      }
      if (options.port) {
        this.port = options.port;
      }

      console.log(`üì° Connection: ${this.connectionType.toUpperCase()}, Port: ${this.port}`);
      
      // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
      if (this.port === 'TEST_PORT') {
        console.log('üß™ Test mode: Skipping real printer initialization');
        this.isConnected = true;
        return true;
      }
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await this.ensureTemplatesDirectory();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É
      const connectionTest = await this.testConnection();
      if (!connectionTest) {
        throw new Error(`Failed to connect to printer on ${this.port}`);
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ EZPL –∫–æ–º–∞–Ω–¥–∞–º–∏
      await this.initializePrinter();
      
      this.isConnected = true;
      console.log(`‚úÖ GoDEX ZX420 printer initialized successfully`);
      console.log(`üìã Supported formats: ${this.supportedFormats.join(', ')}`);
      
      return true;
    } catch (error) {
      console.error('‚ùå Failed to initialize printer:', error);
      this.isConnected = false;
      return false;
    }
  }

  private async testConnection(): Promise<boolean> {
    try {
      console.log('üîç Testing printer connection...');
      
      // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
      if (this.port === 'TEST_PORT') {
        console.log('üìä Test mode: Simulating successful connection');
        return true;
      }
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
      const statusCommand = '~!S'; // EZPL –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
      const result = await this.sendRawCommand(statusCommand);
      
      console.log('üìä Printer status response:', result);
      return true;
    } catch (error) {
      console.error('‚ùå Connection test failed:', error instanceof Error ? error.message : String(error));
      return false;
    }
  }

  private async initializePrinter(): Promise<void> {
    console.log('‚öôÔ∏è Initializing printer with EZPL commands from config...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const ezplSettings = this.config?.ezpl_settings || {};
    
    const initCommands = [
      '^Q25,3',                                      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —ç—Ç–∏–∫–µ—Ç–∫–∏
      '^W80',                                        // –®–∏—Ä–∏–Ω–∞ –ø–µ—á–∞—Ç–∏ 80mm
      `^${ezplSettings.density || 'H10'}`,           // –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
      '^P1',                                         // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π
      `^${ezplSettings.speed || 'S4'}`,              // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
      `^${ezplSettings.darkness || 'E20'}`,          // –¢–µ–º–Ω–æ—Ç–∞ –ø–µ—á–∞—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
      '^AT',                                         // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π tear-off
      '^C1',                                         // Continuous mode
    ];

    for (const command of initCommands) {
      await this.sendRawCommand(command);
      await this.delay(100);
    }
    
    console.log('‚úÖ Printer initialized with EZPL settings from config');
    console.log(`üìä Settings applied: ${ezplSettings.density}, ${ezplSettings.speed}, ${ezplSettings.darkness}`);
  }

  private async ensureTemplatesDirectory(): Promise<void> {
    try {
      await fs.access(this.templatesPath);
    } catch {
      await fs.mkdir(this.templatesPath, { recursive: true });
      console.log(`üìÅ Created templates directory: ${this.templatesPath}`);
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
      await this.createDefaultTemplates();
    }
  }

  async printBarcodeLabels(
    items: PackingItem[], 
    options: PrintJobOptions = {}
  ): Promise<PrintJobResult> {
    console.log('üè∑Ô∏è Starting GoDEX ZX420 label printing job...');
    console.log(`üì¶ Items to print: ${items.length}`);
    
    if (!this.isConnected) {
      throw new Error('Printer not connected. Call initialize() first.');
    }

    const defaultOptions: PrintJobOptions = {
      copies: 1,
      labelSize: 'medium',
      includeBarcodes: true,
      includeText: true,
      includeQuantity: true,
      includePrices: false,
      ...options
    };

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—á–∞—Ç–∏
      const labelData: LabelData[] = await this.prepareLabelData(items, defaultOptions);
      
      console.log('üìã Prepared label data with EZPL templates:');
      labelData.forEach((label, index) => {
        console.log(`  ${index + 1}. ${label.item.item_name} [${label.stickerType}]`);
        console.log(`     Barcode: ${label.barcode}`);
        console.log(`     Quantity: ${label.item.packedQuantity}`);
      });

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è EZPL –∫–æ–º–∞–Ω–¥
      const ezplCommands = await this.generateEZPLCommands(labelData, defaultOptions);
      
      const jobId = `job_${Date.now()}`;
      const estimatedTime = ezplCommands.length * 3; // 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—É
      
      console.log(`‚è±Ô∏è Estimated printing time: ${estimatedTime} seconds`);
      console.log(`üîÑ Job ID: ${jobId}`);
      console.log(`üìú Generated ${ezplCommands.length} EZPL commands`);
      
      // –†–µ–∞–ª—å–Ω–∞—è –ø–µ—á–∞—Ç—å EZPL –∫–æ–º–∞–Ω–¥
      await this.executeEZPLCommands(ezplCommands, jobId);

      const result: PrintJobResult = {
        success: true,
        jobId,
        printedItems: labelData.length * defaultOptions.copies!,
        estimatedTime,
        ezplCommands
      };

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
      this.jobQueue.set(jobId, result);

      console.log('‚úÖ EZPL printing job completed successfully!');
      console.log(`üìä Total labels printed: ${result.printedItems}`);

      return result;

    } catch (error) {
      console.error('‚ùå EZPL printing job failed:', error);
      
      const result: PrintJobResult = {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        printedItems: 0
      };
      
      return result;
    }
  }

  async printLabels(items: PackingItem[], options: PrintJobOptions = {}): Promise<PrintJobResult> {
    console.log(`üè∑Ô∏è Printing ${items.length} label(s) with EZPL...`);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (TDD requirement)
    if (!items || items.length === 0) {
      return {
        success: false,
        error: 'No items to print',
        printedItems: 0
      };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    for (const item of items) {
      if (!item.item_name || item.item_name.trim() === '') {
        return {
          success: false,
          error: 'Invalid item data: item_name is required',
          printedItems: 0
        };
      }
    }

    console.log('üìã Items to print:', items.map(item => `${item.item_name} (x${item.packedQuantity || item.quantity})`));
    
    if (!this.isConnected) {
      const initialized = await this.initialize();
      if (!initialized) {
        return {
          success: false,
          error: 'Printer not available',
          printedItems: 0
        };
      }
    }

    const defaultOptions: PrintJobOptions = {
      copies: 1,
      labelSize: 'medium',
      includeBarcodes: true,
      includeText: true,
      includeQuantity: true,
      includePrices: true,
      connectionType: this.connectionType,
      port: this.port,
      ...options
    };

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—á–∞—Ç–∏
      const labelData: LabelData[] = await this.prepareLabelData(items, defaultOptions);
      
      console.log('üìã Prepared label data with EZPL templates:');
      labelData.forEach((label, index) => {
        console.log(`  ${index + 1}. ${label.item.item_name} [${label.stickerType}]`);
        console.log(`     Barcode: ${label.barcode}`);
        console.log(`     Quantity: ${label.item.packedQuantity}`);
      });

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è EZPL –∫–æ–º–∞–Ω–¥
      const ezplCommands = await this.generateEZPLCommands(labelData, defaultOptions);
      
      const jobId = `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const estimatedTime = ezplCommands.length * 3; // 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—É
      
      console.log(`‚è±Ô∏è Estimated printing time: ${estimatedTime} seconds`);
      console.log(`üîÑ Job ID: ${jobId}`);
      console.log(`üìú Generated ${ezplCommands.length} EZPL commands`);
      
      // –†–µ–∞–ª—å–Ω–∞—è –ø–µ—á–∞—Ç—å EZPL –∫–æ–º–∞–Ω–¥
      await this.executeEZPLCommands(ezplCommands, jobId);

      const result: PrintJobResult = {
        success: true,
        jobId,
        printedItems: labelData.length * defaultOptions.copies!,
        estimatedTime,
        ezplCommands
      };

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
      this.jobQueue.set(jobId, result);

      console.log('‚úÖ EZPL printing job completed successfully!');
      console.log(`üìä Total labels printed: ${result.printedItems}`);

      return result;

    } catch (error) {
      console.error('‚ùå EZPL printing job failed:', error);
      
      const result: PrintJobResult = {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        printedItems: 0
      };
      
      return result;
    }
  }

  async printSingleLabel(item: PackingItem, options: PrintJobOptions = {}): Promise<PrintJobResult> {
    console.log('üè∑Ô∏è Printing single label for:', item.item_name);
    
    return this.printLabels([item], options);
  }

  async getStatus(): Promise<GoDEXPrinterStatus> {
    try {
      console.log('üìä Checking printer status...');
      
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const connected = await this.testConnection();
      
      // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç EZPL –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞
      const status: GoDEXPrinterStatus = {
        connected,
        model: this.printerModel,
        paperLevel: connected ? 85 : 0, // –°–∏–º—É–ª—è—Ü–∏—è —É—Ä–æ–≤–Ω—è –±—É–º–∞–≥–∏
        ribbonLevel: connected ? 70 : 0, // –°–∏–º—É–ª—è—Ü–∏—è —É—Ä–æ–≤–Ω—è –ª–µ–Ω—Ç—ã
        temperature: connected ? 35 : 0, // –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        isReady: connected && this.isConnected,
        lastError: connected ? undefined : 'Connection failed'
      };

      console.log('üìã Printer status:', status);
      return status;
    } catch (error) {
      console.error('‚ùå Failed to get printer status:', error);
      
      return {
        connected: false,
        model: this.printerModel,
        paperLevel: 0,
        ribbonLevel: 0,
        temperature: 0,
        isReady: false,
        lastError: error instanceof Error ? error.message : String(error)
      };
    }
  }

  async testPrint(): Promise<PrintJobResult> {
    console.log('üß™ Executing test print...');
    
    try {
      const testItem: PackingItem = {
        item_id: 999,
        item_name: '◊ë◊ì◊ô◊ß◊™ ◊î◊ì◊§◊°◊î',
        item_part_num: 'TEST001',
        item_extended_description: '◊§◊®◊ô◊ò ◊ë◊ì◊ô◊ß◊î ◊ú◊î◊ì◊§◊°◊î',
        quantity: 1,
        cost_nis: 0.01,
        sale_nis: 0.01,
        currency_id: 1,
        cost_mtc: 0.01,
        sale_mtc: 0.01,
        picture_link: null,
        exempt_vat: false,
        avitem: 0,
        storage_id: 1,
        item_group_id: 1,
        location: 'TEST',
        is_serial: 0,
        sapak: 0,
        item_name_en: 'Test Print',
        item_order: 999,
        barcode: '1234567890123',
        line_id: 'test_print_line',
        isPacked: true,
        isAvailable: true,
        packedQuantity: 1
      };

      const result = await this.printSingleLabel(testItem, {
        copies: 1,
        labelSize: 'medium',
        includeBarcodes: true,
        includeText: true
      });

      console.log('‚úÖ Test print completed');
      return result;
    } catch (error) {
      console.error('‚ùå Test print failed:', error);
      
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        printedItems: 0
      };
    }
  }

  async configure(config: any): Promise<boolean> {
    try {
      console.log('‚öôÔ∏è Configuring printer with:', config);
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
      if (config.model) this.printerModel = config.model;
      if (config.dpi || config.speed || config.darkness) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ EZPL –∫–æ–º–∞–Ω–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const configCommands = [];
        
        if (config.speed) {
          configCommands.push(`^S${config.speed}`); // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
        }
        if (config.darkness) {
          configCommands.push(`^H${config.darkness}`); // –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
        }
        
        for (const command of configCommands) {
          await this.sendRawCommand(command);
        }
      }
      
      console.log('‚úÖ Printer configured successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Failed to configure printer:', error);
      return false;
    }
  }

  private async generateEZPLCommands(labelData: LabelData[], options: PrintJobOptions): Promise<string[]> {
    const commands: string[] = [];
    
    for (const label of labelData) {
      for (let copy = 0; copy < options.copies!; copy++) {
        const ezplCommand = await this.generateSingleLabelEZPL(label, options);
        commands.push(ezplCommand);
      }
    }
    
    return commands;
  }

  private async generateSingleLabelEZPL(label: LabelData, options: PrintJobOptions): Promise<string> {
    const template = await this.loadTemplate(label.stickerType);
    
    // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ
    let ezplCode = template
      .replace('${ITEM_NAME}', this.escapeText(label.item.item_name))
      .replace('${ITEM_NAME_HE}', this.escapeText(label.item.item_name))
      .replace('${BARCODE}', label.barcode || '')
      .replace('${QUANTITY}', label.item.packedQuantity?.toString() || '0')
      .replace('${PRICE}', label.item.sale_nis?.toFixed(2) || '0.00')
      .replace('${DATE}', new Date().toLocaleDateString('he-IL'))
      .replace('${TIME}', new Date().toLocaleTimeString('he-IL'))
      .replace('${STORAGE}', label.item.storage_id?.toString() || '');

    return ezplCode;
  }

  private async executeEZPLCommands(commands: string[], jobId: string): Promise<void> {
    console.log(`üñ®Ô∏è Executing ${commands.length} EZPL commands...`);
    
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      console.log(`üìÑ Printing label ${i + 1}/${commands.length} (Job: ${jobId})`);
      
      try {
        await this.sendRawCommand(command);
        console.log(`‚úÖ Label ${i + 1} sent successfully`);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —ç—Ç–∏–∫–µ—Ç–∫–∞–º–∏
        await this.delay(2000);
        
      } catch (error) {
        console.error(`‚ùå Failed to print label ${i + 1}:`, error instanceof Error ? error.message : String(error));
        
        // Retry –º–µ—Ö–∞–Ω–∏–∑–º
        console.log(`üîÑ Retrying label ${i + 1}...`);
        await this.delay(1000);
        
        try {
          await this.sendRawCommand(command);
          console.log(`‚úÖ Label ${i + 1} printed on retry`);
        } catch (retryError) {
          console.error(`‚ùå Retry failed for label ${i + 1}:`, retryError instanceof Error ? retryError.message : String(retryError));
          throw new Error(`Failed to print label ${i + 1} after retry`);
        }
      }
    }
    
    console.log(`‚úÖ All ${commands.length} labels printed successfully!`);
  }


  async checkPrinterStatus(): Promise<GoDEXPrinterStatus> {
    if (!this.isConnected) {
      return {
        connected: false,
        model: this.printerModel,
        paperLevel: 0,
        ribbonLevel: 0,
        temperature: 0,
        lastError: 'Printer not connected',
        isReady: false
      };
    }

    try {
      // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ EZPL –∫–æ–º–∞–Ω–¥–æ–π
      const statusResponse = await this.sendRawCommand('~!S');
      
      // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ (–ø—Ä–∏–º–µ—Ä –¥–ª—è GoDEX)
      const status = this.parseStatusResponse(statusResponse);
      
      return {
        connected: true,
        model: this.printerModel,
        paperLevel: status.paperLevel,
        ribbonLevel: status.ribbonLevel,
        temperature: status.temperature,
        isReady: status.isReady,
        lastError: status.error
      };
    } catch (error) {
      console.error('‚ùå Failed to get printer status:', error instanceof Error ? error.message : String(error));
      
      return {
        connected: this.isConnected,
        model: this.printerModel,
        paperLevel: 75, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–≤—è–∑–∏
        ribbonLevel: 80,
        temperature: 25,
        lastError: `Status check failed: ${error instanceof Error ? error.message : String(error)}`,
        isReady: false
      };
    }
  }

  private parseStatusResponse(response: string): {
    paperLevel: number;
    ribbonLevel: number;
    temperature: number;
    isReady: boolean;
    error?: string;
  } {
    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è GoDEX –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–æ–¥–µ–ª—å
    
    const defaultStatus = {
      paperLevel: 90,
      ribbonLevel: 85,
      temperature: 28,
      isReady: true
    };

    if (!response || response.length < 5) {
      return { ...defaultStatus, isReady: false, error: 'Invalid status response' };
    }

    // –ü—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞)
    try {
      if (response.includes('ERROR') || response.includes('FAULT')) {
        return { ...defaultStatus, isReady: false, error: 'Printer error detected' };
      }
      
      if (response.includes('PAPER') && response.includes('OUT')) {
        return { ...defaultStatus, paperLevel: 0, isReady: false, error: 'Paper out' };
      }
      
      if (response.includes('RIBBON') && response.includes('OUT')) {
        return { ...defaultStatus, ribbonLevel: 0, isReady: false, error: 'Ribbon out' };
      }

      return defaultStatus;
    } catch (error) {
      return { ...defaultStatus, isReady: false, error: 'Status parsing error' };
    }
  }


  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é –ø–µ—á–∞—Ç–∏
  getJobStatus(jobId: string): PrintJobResult | undefined {
    return this.jobQueue.get(jobId);
  }

  getAllJobs(): PrintJobResult[] {
    return Array.from(this.jobQueue.values());
  }

  clearJobHistory(): void {
    this.jobQueue.clear();
    console.log('üóëÔ∏è Print job history cleared');
  }

  getJobsByStatus(success: boolean): PrintJobResult[] {
    return this.getAllJobs().filter(job => job.success === success);
  }

  private async prepareLabelData(
    items: PackingItem[], 
    options: PrintJobOptions
  ): Promise<LabelData[]> {
    const labelData: LabelData[] = [];

    for (const item of items) {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
      const barcode = item.barcode || this.generateBarcode(item.item_id);
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç–∏–∫–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
      const stickerType = this.determineStickerType(item.item_name);
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
      const qrData = JSON.stringify({
        id: item.item_id,
        name: item.item_name,
        quantity: item.packedQuantity,
        storage: item.storage_id,
        type: stickerType
      });

      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —ç—Ç–∏–∫–µ—Ç–∫–∏
      let customText = item.item_name;
      
      if (options.includeQuantity) {
        customText += `\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.packedQuantity}`;
      }
      
      if (options.includePrices && item.sale_nis > 0) {
        customText += `\n–¶–µ–Ω–∞: ‚Ç™${item.sale_nis.toFixed(2)}`;
      }

      if (item.location) {
        customText += `\n–ú–µ—Å—Ç–æ: ${item.location}`;
      }

      labelData.push({
        item,
        barcode,
        qrCode: qrData,
        customText,
        stickerType
      });
    }

    return labelData;
  }

  private determineStickerType(itemName: string): string {
    const name = itemName.toLowerCase();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    const productMapping = this.config?.product_mapping || {};
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for (const [productKey, templateName] of Object.entries(productMapping)) {
      if (name.includes(productKey.toLowerCase())) {
        return (templateName as string).replace('template_', ''); // template_pelmeni -> pelmeni
      }
    }
    
    // Fallback –Ω–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ shared –ø–∞–∫–µ—Ç–∞
    // –£–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ STICKER_MAPPING –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –µ–≥–æ
    // for (const [hebrewName, templateName] of Object.entries(STICKER_MAPPING)) {
    //   if (name.includes(hebrewName.toLowerCase())) {
    //     return (templateName as string).replace('template_', '');
    //   }
    // }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    if (name.includes('–ø–µ–ª—å–º–µ–Ω–∏')) return 'pelmeni';
    if (name.includes('–±–ª–∏–Ω')) return 'blini';
    if (name.includes('–≤–∞—Ä–µ–Ω–∏–∫')) return 'vareniki';
    if (name.includes('–º–∞–Ω—Ç—ã')) return 'manty';
    
    return 'universal'; // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  private async loadTemplate(stickerType: string): Promise<string> {
    const templatePath = path.join(this.templatesPath, `${stickerType}.ezpl`);
    
    try {
      const template = await fs.readFile(templatePath, 'utf-8');
      return template;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Template not found: ${templatePath}, using universal template`);
      
      // Fallback –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
      const universalPath = path.join(this.templatesPath, 'universal.ezpl');
      try {
        return await fs.readFile(universalPath, 'utf-8');
      } catch {
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–∂–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π
        return this.createBasicEZPLTemplate();
      }
    }
  }

  private createBasicEZPLTemplate(): string {
    return `
^Q25,3
^W80
^H10
^P1
^S4
^AD
^C1
^R0
~Q+0
^O0
^D0
^E20
~R255
^L

Dy2-me-dd
Th:m:s

T12,25,0,2,1,1,N,"\${ITEM_NAME}"
T12,50,0,1,1,1,N,"Qty: \${QUANTITY}"
T12,75,0,1,1,1,N,"\${DATE} \${TIME}"
B12,100,0,1,2,6,60,B,"\${BARCODE}"

E
`.trim();
  }

  private async createDefaultTemplates(): Promise<void> {
    console.log('üìù Creating default EZPL templates...');
    
    const templates = {
      'pelmeni.ezpl': `
^Q25,3
^W80
^H10
^P1
^S4
^AD
^C1
^R0
~Q+0
^O0
^D0
^E20
~R255
^L

Dy2-me-dd
Th:m:s

T5,15,0,3,1,1,N,"–ü–ï–õ–¨–ú–ï–ù–ò"
T5,35,0,2,1,1,N,"\${ITEM_NAME}"
T5,55,0,1,1,1,N,"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: \${QUANTITY}"
T5,70,0,1,1,1,N,"–¶–µ–Ω–∞: ‚Ç™\${PRICE}"
T5,85,0,1,1,1,N,"\${DATE} \${TIME}"
B5,100,0,1,2,6,60,B,"\${BARCODE}"

E
`,
      'blini.ezpl': `
^Q25,3
^W80
^H10
^P1
^S4
^AD
^C1
^R0
~Q+0
^O0
^D0
^E20
~R255
^L

Dy2-me-dd
Th:m:s

T5,15,0,3,1,1,N,"–ë–õ–ò–ù–´"
T5,35,0,2,1,1,N,"\${ITEM_NAME}"
T5,55,0,1,1,1,N,"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: \${QUANTITY}"
T5,70,0,1,1,1,N,"–¶–µ–Ω–∞: ‚Ç™\${PRICE}"
T5,85,0,1,1,1,N,"\${DATE} \${TIME}"
B5,100,0,1,2,6,60,B,"\${BARCODE}"

E
`,
      'vareniki.ezpl': `
^Q25,3
^W80
^H10
^P1
^S4
^AD
^C1
^R0
~Q+0
^O0
^D0
^E20
~R255
^L

Dy2-me-dd
Th:m:s

T5,15,0,3,1,1,N,"–í–ê–†–ï–ù–ò–ö–ò"
T5,35,0,2,1,1,N,"\${ITEM_NAME}"
T5,55,0,1,1,1,N,"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: \${QUANTITY}"
T5,70,0,1,1,1,N,"–¶–µ–Ω–∞: ‚Ç™\${PRICE}"
T5,85,0,1,1,1,N,"\${DATE} \${TIME}"
B5,100,0,1,2,6,60,B,"\${BARCODE}"

E
`,
      'manty.ezpl': `
^Q25,3
^W80
^H10
^P1
^S4
^AD
^C1
^R0
~Q+0
^O0
^D0
^E20
~R255
^L

Dy2-me-dd
Th:m:s

T5,15,0,3,1,1,N,"–ú–ê–ù–¢–´"
T5,35,0,2,1,1,N,"\${ITEM_NAME}"
T5,55,0,1,1,1,N,"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: \${QUANTITY}"
T5,70,0,1,1,1,N,"–¶–µ–Ω–∞: ‚Ç™\${PRICE}"
T5,85,0,1,1,1,N,"\${DATE} \${TIME}"
B5,100,0,1,2,6,60,B,"\${BARCODE}"

E
`,
      'universal.ezpl': this.createBasicEZPLTemplate()
    };

    for (const [filename, content] of Object.entries(templates)) {
      const filePath = path.join(this.templatesPath, filename);
      await fs.writeFile(filePath, content.trim(), 'utf-8');
      console.log(`‚úÖ Created template: ${filename}`);
    }
  }

  private async sendRawCommand(command: string): Promise<string> {
    console.log(`üì§ Sending EZPL command: ${command.substring(0, 50)}...`);
    
    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–æ—Ç–≤–µ—Ç
    if (this.port === 'TEST_PORT') {
      console.log('üìä Test mode: Simulating command response');
      return 'TEST_RESPONSE_OK';
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    const connectionMethods = this.config?.connection_methods || [];
    
    if (connectionMethods.length > 0) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
      const sortedMethods = connectionMethods.sort((a: any, b: any) => a.priority - b.priority);
      
      for (const method of sortedMethods) {
        try {
          console.log(`üîÑ Trying method: ${method.method} (priority ${method.priority})`);
          const result = await this.executeConnectionMethod(method, command);
          console.log(`‚úÖ Command sent successfully via ${method.method}`);
          return result;
        } catch (error) {
          console.warn(`‚ö†Ô∏è Method ${method.method} failed: ${error instanceof Error ? error.message : String(error)}`);
        }
      }
      
      throw new Error('All configured connection methods failed');
    }
    
    // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã
    try {
      switch (this.connectionType) {
        case 'usb':
        case 'serial':
          return await this.sendSerialCommand(command);
        case 'ethernet':
          return await this.sendNetworkCommand(command);
        default:
          throw new Error(`Unsupported connection type: ${this.connectionType}`);
      }
    } catch (error) {
      console.error(`‚ùå Failed to send command:`, error instanceof Error ? error.message : String(error));
      throw error;
    }
  }

  private async executeConnectionMethod(method: any, command: string): Promise<string> {
    switch (method.method) {
      case 'raw_copy':
        return await this.sendViaCopy(command);
      case 'lpt_redirect':
        return await this.sendViaLPT(command);
      case 'powershell_print':
        return await this.sendViaPowerShell(command);
      case 'system_print':
        return await this.sendViaSystemPrint(command);
      default:
        throw new Error(`Unknown connection method: ${method.method}`);
    }
  }

  private async sendViaLPT(command: string): Promise<string> {
    const { stdout, stderr } = await execAsync(`echo "${command}" > LPT1`);
    if (stderr) throw new Error(stderr);
    return stdout;
  }

  private async sendViaPowerShell(command: string): Promise<string> {
    const tempFile = path.join(this.templatesPath, 'temp_print.ezpl');
    await fs.writeFile(tempFile, command, 'utf-8');
    
    try {
      const { stdout, stderr } = await execAsync(
        `powershell -Command "Get-Content '${tempFile}' | Out-Printer -Name '${this.printerModel}'"`
      );
      if (stderr) throw new Error(stderr);
      return stdout;
    } finally {
      try {
        await fs.unlink(tempFile);
      } catch {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
    }
  }

  private async sendViaSystemPrint(command: string): Promise<string> {
    const tempFile = path.join(this.templatesPath, 'temp_print.ezpl');
    await fs.writeFile(tempFile, command, 'utf-8');
    
    try {
      const { stdout, stderr } = await execAsync(`print "${tempFile}"`);
      if (stderr && !stderr.includes('printed')) throw new Error(stderr);
      return stdout;
    } finally {
      try {
        await fs.unlink(tempFile);
      } catch {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
    }
  }

  private async sendSerialCommand(command: string): Promise<string> {
    // –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ COM –ø–æ—Ä—Ç
    const psCommand = `
      $port = New-Object System.IO.Ports.SerialPort('${this.port}', 9600, 'None', 8, 'One')
      try {
        $port.Open()
        $port.WriteLine('${command.replace(/'/g, "''")}')
        Start-Sleep -Milliseconds 500
        $response = $port.ReadExisting()
        $port.Close()
        Write-Output $response
      } catch {
        if ($port.IsOpen) { $port.Close() }
        throw $_.Exception.Message
      }
    `;

    try {
      const { stdout, stderr } = await execAsync(`powershell -Command "${psCommand}"`);
      if (stderr) throw new Error(stderr);
      return stdout.trim();
    } catch (error) {
      // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ copy –∫–æ–º–∞–Ω–¥—É
      console.warn('‚ö†Ô∏è PowerShell method failed, trying copy method...');
      return await this.sendViaCopy(command);
    }
  }

  private async sendViaCopy(command: string): Promise<string> {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å EZPL –∫–æ–º–∞–Ω–¥–æ–π
    const tempFile = path.join(this.templatesPath, 'temp_print.ezpl');
    await fs.writeFile(tempFile, command, 'utf-8');
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä —á–µ—Ä–µ–∑ copy –∫–æ–º–∞–Ω–¥—É
      const { stdout, stderr } = await execAsync(`copy "${tempFile}" ${this.port}`);
      if (stderr && !stderr.includes('copied')) {
        throw new Error(stderr);
      }
      
      return 'Command sent via copy';
    } finally {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      try {
        await fs.unlink(tempFile);
      } catch {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
    }
  }

  private async sendNetworkCommand(command: string): Promise<string> {
    // –î–ª—è Ethernet –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º socket connection
    const net = require('net');
    
    return new Promise((resolve, reject) => {
      const socket = net.createConnection(9100, this.port, () => {
        socket.write(command);
        socket.end();
      });

      let response = '';
      socket.on('data', (data: any) => {
        response += data.toString();
      });

      socket.on('end', () => {
        resolve(response);
      });

      socket.on('error', (error: any) => {
        reject(error);
      });

      // Timeout —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        socket.destroy();
        reject(new Error('Network command timeout'));
      }, 10000);
    });
  }

  private escapeText(text: string): string {
    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è EZPL
    return text
      .replace(/\\/g, '\\\\')
      .replace(/"/g, '\\"')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r');
  }

  private async simulatePrinting(
    labelData: LabelData[], 
    options: PrintJobOptions,
    jobId: string
  ): Promise<void> {
    const totalLabels = labelData.length * options.copies!;
    
    console.log(`üñ®Ô∏è Starting to print ${totalLabels} labels...`);
    
    for (let copy = 0; copy < options.copies!; copy++) {
      for (let i = 0; i < labelData.length; i++) {
        const currentLabel = (copy * labelData.length) + i + 1;
        const label = labelData[i];
        
        console.log(`üìÑ Printing label ${currentLabel}/${totalLabels}: ${label.item.item_name}`);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—á–∞—Ç–∏
        await this.delay(1500 + Math.random() * 1000);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—à–∏–±–∫–∏ (–æ—á–µ–Ω—å —Ä–µ–¥–∫–æ)
        if (Math.random() < 0.02) { // 2% —à–∞–Ω—Å –æ—à–∏–±–∫–∏
          console.warn(`‚ö†Ô∏è Warning: Paper jam detected, retrying...`);
          await this.delay(3000);
        }
      }
    }
    
    console.log(`‚úÖ All ${totalLabels} labels printed successfully!`);
  }

  private generateBarcode(itemId: number): string {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID —Ç–æ–≤–∞—Ä–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç EAN-13 –∏–ª–∏ Code 128
    return `729001158${itemId.toString().padStart(4, '0')}`;
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
  async configurePrinter(config: {
    model?: string;
    dpi?: number;
    speed?: number;
    darkness?: number;
    connectionType?: 'usb' | 'serial' | 'ethernet';
    port?: string;
  }): Promise<boolean> {
    console.log('‚öôÔ∏è Configuring GoDEX ZX420 with:', config);
    
    if (config.model) {
      this.printerModel = config.model;
    }
    
    if (config.connectionType) {
      this.connectionType = config.connectionType;
    }
    
    if (config.port) {
      this.port = config.port;
    }
    
    try {
      const configCommands: string[] = [];
      
      if (config.speed) {
        configCommands.push(`^S${config.speed}`); // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ (1-5)
      }
      
      if (config.darkness) {
        configCommands.push(`^E${config.darkness}`); // –¢–µ–º–Ω–æ—Ç–∞ (0-30)
      }
      
      if (config.dpi) {
        // DPI –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —à–∏—Ä–∏–Ω—É –ø–µ—á–∞—Ç–∏
        const width = config.dpi === 300 ? 80 : 60;
        configCommands.push(`^W${width}`);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      for (const command of configCommands) {
        await this.sendRawCommand(command);
        await this.delay(100);
      }
      
      console.log('‚úÖ Printer configured successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Printer configuration failed:', error instanceof Error ? error.message : String(error));
      return false;
    }
  }

  getSupportedFormats(): string[] {
    return [...this.supportedFormats];
  }

  getConnectionInfo(): { type: string; port: string; model: string; status: string } {
    return {
      type: this.connectionType,
      port: this.port,
      model: this.printerModel,
      status: this.isConnected ? 'connected' : 'disconnected'
    };
  }

  async disconnect(): Promise<void> {
    console.log('üîå Disconnecting GoDEX ZX420 printer...');
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É reset –ø—Ä–∏–Ω—Ç–µ—Ä–∞
      if (this.isConnected) {
        await this.sendRawCommand('~R'); // Reset –∫–æ–º–∞–Ω–¥–∞
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Warning during disconnect:', error instanceof Error ? error.message : String(error));
    }
    
    this.isConnected = false;
    this.jobQueue.clear();
    
    console.log('‚úÖ Printer disconnected');
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—á–∞—Ç–∏ GoDEX ZX420
export class PrinterServiceFactory {
  static createGoDEXService(templatesPath?: string): PrinterService {
    return new PrinterService(templatesPath);
  }
  
  static create(
    printerModel: string = 'GoDEX ZX420', 
    templatesPath?: string,
    config?: {
      connectionType?: 'usb' | 'serial' | 'ethernet';
      port?: string;
      speed?: number;
      darkness?: number;
    }
  ): PrinterService {
    const service = new PrinterService(templatesPath);
    
    if (config) {
      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      service.configurePrinter({ model: printerModel, ...config });
    }
    
    return service;
  }
  
  // –ì–æ—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  static createUSBService(port: string = 'COM1', templatesPath?: string): PrinterService {
    return PrinterServiceFactory.create('GoDEX ZX420', templatesPath, {
      connectionType: 'usb',
      port,
      speed: 4,
      darkness: 20
    });
  }
  
  static createEthernetService(ipAddress: string, templatesPath?: string): PrinterService {
    return PrinterServiceFactory.create('GoDEX ZX420', templatesPath, {
      connectionType: 'ethernet',
      port: ipAddress,
      speed: 4,
      darkness: 20
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
// export type {
//   PrintJobOptions,
//   PrintJobResult,
//   LabelData,
//   GoDEXPrinterStatus
// };