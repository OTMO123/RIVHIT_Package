import * as net from 'net';

export class SimpleZPLService {
  private printerIP: string = '192.168.14.200';
  private printerPort: number = 9101;

  /**
   * –ü–µ—á–∞—Ç—å –ø—Ä–æ—Å—Ç—ã—Ö —ç—Ç–∏–∫–µ—Ç–æ–∫ –∫–æ—Ä–æ–±–æ–∫
   */
  async printBoxLabels(labels: any[]): Promise<any> {
    console.log(`üè∑Ô∏è Printing ${labels.length} box labels...`);
    
    let printedCount = 0;

    for (const label of labels) {
      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é ZPL —ç—Ç–∏–∫–µ—Ç–∫—É
        const zpl = this.generateSimpleLabel(label);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const success = await this.sendRawZPL(zpl);
        
        if (success) {
          printedCount++;
          console.log(`‚úÖ Printed box ${label.boxNumber}`);
        }
      } catch (error) {
        console.error(`‚ùå Error printing box ${label.boxNumber}:`, error);
      }
    }

    return {
      success: printedCount > 0,
      printedCount
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π ZPL —ç—Ç–∏–∫–µ—Ç–∫–∏
   */
  private generateSimpleLabel(label: any): string {
    const boxNumber = label.boxNumber || 1;
    const orderId = label.orderId || '39344';
    const items = label.items || [];
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ZPL –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
    const lines = [];
    
    // –ù–∞—á–∞–ª–æ —ç—Ç–∏–∫–µ—Ç–∫–∏
    lines.push(String.fromCharCode(94) + 'XA'); // ^XA
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ - –Ω–æ–º–µ—Ä –∫–æ—Ä–æ–±–∫–∏
    lines.push(String.fromCharCode(94) + 'FO50,30');
    lines.push(String.fromCharCode(94) + 'A0N,40,40');
    lines.push(String.fromCharCode(94) + `FDBox ${boxNumber}` + String.fromCharCode(94) + 'FS');
    
    // –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    lines.push(String.fromCharCode(94) + 'FO50,80');
    lines.push(String.fromCharCode(94) + 'A0N,25,25');
    lines.push(String.fromCharCode(94) + `FDOrder ${orderId}` + String.fromCharCode(94) + 'FS');
    
    // –®—Ç—Ä–∏—Ö-–∫–æ–¥
    lines.push(String.fromCharCode(94) + 'FO150,120');
    lines.push(String.fromCharCode(94) + 'BY2,3,70');
    lines.push(String.fromCharCode(94) + 'BCN,,Y,N');
    lines.push(String.fromCharCode(94) + `FD${orderId}` + String.fromCharCode(94) + 'FS');
    
    // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–µ—Ä–≤—ã–µ 3)
    let yPos = 220;
    for (let i = 0; i < Math.min(3, items.length); i++) {
      const item = items[i];
      if (item) {
        lines.push(String.fromCharCode(94) + `FO50,${yPos}`);
        lines.push(String.fromCharCode(94) + 'A0N,20,20');
        const itemText = `${item.name || 'Item'} x${item.quantity || 1}`;
        lines.push(String.fromCharCode(94) + `FD${itemText}` + String.fromCharCode(94) + 'FS');
        yPos += 30;
      }
    }
    
    // –ö–æ–Ω–µ—Ü —ç—Ç–∏–∫–µ—Ç–∫–∏
    lines.push(String.fromCharCode(94) + 'XZ'); // ^XZ
    
    return lines.join('\n');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—ã—Ä–æ–≥–æ ZPL –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä
   */
  private async sendRawZPL(zpl: string): Promise<boolean> {
    return new Promise((resolve) => {
      const client = new net.Socket();
      
      client.connect(this.printerPort, this.printerIP, () => {
        console.log('üì° Sending ZPL to printer...');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –µ—Å—Ç—å
        client.write(zpl);
        
        setTimeout(() => {
          client.end();
          resolve(true);
        }, 500);
      });
      
      client.on('error', (err) => {
        console.error('‚ùå Connection error:', err.message);
        resolve(false);
      });
      
      client.on('timeout', () => {
        client.destroy();
        resolve(false);
      });
    });
  }
}

export default SimpleZPLService;