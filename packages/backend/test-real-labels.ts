import { ZPLPrinterService } from './src/services/zpl-printer.service';
import { PackingItem } from '@packing/shared';

async function testRealLabels() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö —ç—Ç–∏–∫–µ—Ç–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...');
  console.log('=' .repeat(50));
  
  const printerService = new ZPLPrinterService();

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    console.log('\nüì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É GoDEX...');
    const initialized = await printerService.initialize();

    if (!initialized) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä');
    }

    console.log('‚úÖ –ü—Ä–∏–Ω—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω!\n');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–µ—á–∞—Ç–∏
    const items: PackingItem[] = [
      {
        item_id: 101,
        item_name: '–ü–µ–ª—å–º–µ–Ω–∏ –°–∏–±–∏—Ä—Å–∫–∏–µ',
        item_name_en: 'Siberian Pelmeni',
        item_part_num: 'PEL-001',
        barcode: '7290011580101',
        quantity: 2,
        packedQuantity: 2,
        location: 'A-12',
        sale_nis: 45.90,
        cost_nis: 30.00,
        isPacked: true,
        isAvailable: true,
        // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        item_extended_description: '',
        currency_id: 1,
        cost_mtc: 30.00,
        sale_mtc: 45.90,
        picture_link: null,
        exempt_vat: false,
        avitem: 0,
        storage_id: 1,
        item_group_id: 1,
        is_serial: 0,
        sapak: 0,
        item_order: 1,
        line_id: 'line_1'
      },
      {
        item_id: 102,
        item_name: '–í–∞—Ä–µ–Ω–∏–∫–∏ —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π',
        item_name_en: 'Potato Vareniki',
        item_part_num: 'VAR-002',
        barcode: '7290011580102',
        quantity: 3,
        packedQuantity: 3,
        location: 'B-05',
        sale_nis: 38.50,
        cost_nis: 25.00,
        isPacked: true,
        isAvailable: true,
        // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        item_extended_description: '',
        currency_id: 1,
        cost_mtc: 25.00,
        sale_mtc: 38.50,
        picture_link: null,
        exempt_vat: false,
        avitem: 0,
        storage_id: 1,
        item_group_id: 1,
        is_serial: 0,
        sapak: 0,
        item_order: 2,
        line_id: 'line_2'
      },
      {
        item_id: 103,
        item_name: '–ë–ª–∏–Ω—ã —Å –º—è—Å–æ–º',
        item_name_en: 'Meat Blini',
        item_part_num: 'BLI-003',
        barcode: '7290011580103',
        quantity: 1,
        packedQuantity: 1,
        location: 'C-18',
        sale_nis: 52.00,
        cost_nis: 35.00,
        isPacked: true,
        isAvailable: true,
        // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        item_extended_description: '',
        currency_id: 1,
        cost_mtc: 35.00,
        sale_mtc: 52.00,
        picture_link: null,
        exempt_vat: false,
        avitem: 0,
        storage_id: 1,
        item_group_id: 1,
        is_serial: 0,
        sapak: 0,
        item_order: 3,
        line_id: 'line_3'
      }
    ];

    console.log('üì¶ –¢–æ–≤–∞—Ä—ã –¥–ª—è –ø–µ—á–∞—Ç–∏:');
    items.forEach((item, index) => {
      console.log(`  ${index + 1}. ${item.item_name}`);
      console.log(`     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.packedQuantity}`);
      console.log(`     –®—Ç—Ä–∏—Ö-–∫–æ–¥: ${item.barcode}`);
      console.log(`     –õ–æ–∫–∞—Ü–∏—è: ${item.location}`);
      console.log(`     –¶–µ–Ω–∞: ‚Ç™${item.sale_nis}`);
      console.log('');
    });

    // –ü–µ—á–∞—Ç–∞–µ–º —ç—Ç–∏–∫–µ—Ç–∫–∏
    console.log('üñ®Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–∏–∫–µ—Ç–∫–∏ –Ω–∞ –ø–µ—á–∞—Ç—å...\n');
    
    const result = await printerService.printLabels(items, {
      copies: 1,
      includeBarcodes: true,
      includeText: true,
      includeQuantity: true,
      includePrices: true
    });

    if (result.success) {
      console.log('\n‚úÖ –£–°–ü–ï–•! –í—Å–µ —ç—Ç–∏–∫–µ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–µ—á–∞—Ç—å!');
      console.log(`üìä –ù–∞–ø–µ—á–∞—Ç–∞–Ω–æ —ç—Ç–∏–∫–µ—Ç–æ–∫: ${result.printedItems}`);
      console.log(`üÜî ID –∑–∞–¥–∞–Ω–∏—è: ${result.jobId}`);
      console.log('\nüè∑Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä - –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å—Å—è 3 —ç—Ç–∏–∫–µ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤!');
    } else {
      console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏:', result.error);
    }

  } catch (error) {
    console.error('\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:');
    console.error(error);
    process.exit(1);
  }

  console.log('\n' + '=' .repeat(50));
  console.log('‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testRealLabels().then(() => {
  console.log('\nüëã –ì–æ—Ç–æ–≤–æ!');
  process.exit(0);
}).catch((error) => {
  console.error('\nüí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});