import React, { useState } from 'react';
import { 
  Button, 
  Space, 
  Modal, 
  message, 
  Typography, 
  Card,
  Spin,
  Alert,
  Descriptions,
  Badge,
  Tooltip,
  Divider
} from 'antd';
import { 
  PrinterOutlined, 
  FileTextOutlined, 
  BarcodeOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  ReloadOutlined,
  InboxOutlined,
  FileDoneOutlined
} from '@ant-design/icons';
import { PackingItem } from '@packing/shared';
import { BoxLabelPrint } from './BoxLabelPrint';
import { PrinterSettings } from './PrinterSettings';

const { Text, Title } = Typography;

interface PrintActionsProps {
  orderId: string;
  items: PackingItem[];
  customerName?: string;
  customerCity?: string;
  customerData?: any; // Full customer data for invoice
  disabled?: boolean;
  onPrintComplete?: (jobId: string, type: 'shipping' | 'product' | 'box' | 'invoice') => void;
  orderNumber?: string; // Order number for invoice reference
}

interface PrinterStatus {
  connected: boolean;
  model: string;
  paperLevel: number;
  ribbonLevel: number;
  temperature: number;
  isReady: boolean;
  lastError?: string;
}

export const PrintActions: React.FC<PrintActionsProps> = ({
  orderId,
  items,
  customerName = '◊ú◊ß◊ï◊ó',
  customerCity,
  customerData,
  disabled = false,
  onPrintComplete,
  orderNumber
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [printerStatus, setPrinterStatus] = useState<PrinterStatus | null>(null);
  const [showStatusModal, setShowStatusModal] = useState(false);
  const [showPrinterSettings, setShowPrinterSettings] = useState(false);
  const [lastPrintJob, setLastPrintJob] = useState<string | null>(null);
  const [lastPrintError, setLastPrintError] = useState<string | null>(null);

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–µ—á–∞—Ç–∏
  const printableItems = items.filter(item => 
    item.isPacked && 
    item.isAvailable && 
    item.packedQuantity > 0
  );

  const handlePrintError = (error: string, context: string) => {
    console.error(`üí• [PRINT ERROR] ${context}:`, error);
    setLastPrintError(error);
    
    // Show error modal with printer settings button
    Modal.error({
      title: '–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏',
      content: (
        <div>
          <Alert
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏"
            description={`${error}${context ? ` (${context})` : ''}`}
            type="error"
            showIcon
            style={{ marginBottom: 16 }}
          />
          <Text type="secondary">
            –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
          </Text>
          <ul style={{ marginTop: 8, marginBottom: 16 }}>
            <li>–ü—Ä–∏–Ω—Ç–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</li>
            <li>–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º</li>
            <li>–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞</li>
            <li>–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ VPN</li>
          </ul>
        </div>
      ),
      okText: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞',
      onOk: () => {
        console.log('üîß [PRINT ERROR] Opening printer settings...');
        setShowPrinterSettings(true);
      }
    });
  };

  const checkPrinterStatus = async () => {
    console.log('üîç [PRINTER STATUS] Checking printer status...');
    try {
      const response = await fetch('/api/print/status');
      const data = await response.json();
      
      console.log('üì° [PRINTER STATUS] Response:', data);
      
      if (data.success) {
        setPrinterStatus(data.status);
        console.log(`‚úÖ [PRINTER STATUS] Status retrieved, isReady: ${data.status.isReady}`);
        return data.status.isReady;
      } else {
        console.error('‚ùå [PRINTER STATUS] Failed to get status:', data.error);
        handlePrintError(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞');
        return false;
      }
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.error('üí• [PRINTER STATUS] Network error:', errorMsg);
      handlePrintError(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É: ${errorMsg}`, '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞');
      return false;
    }
  };

  const printShippingLabel = async () => {
    console.log('üè∑Ô∏è [SHIPPING LABEL] –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏...');
    console.log('üìã [SHIPPING LABEL] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
      orderId,
      customerName,
      printableItemsCount: printableItems.length,
      items: printableItems.map(item => ({ 
        id: item.item_id, 
        description: item.item_name,
        quantity: item.quantity 
      }))
    });

    if (printableItems.length === 0) {
      console.warn('‚ö†Ô∏è [SHIPPING LABEL] –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏');
      message.warning('–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏');
      return;
    }

    setIsLoading(true);
    try {
      console.log('üîç [SHIPPING LABEL] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞...');
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
      const isReady = await checkPrinterStatus();
      console.log('üì° [SHIPPING LABEL] –°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞:', isReady);
      
      if (!isReady) {
        console.warn('‚ö†Ô∏è [SHIPPING LABEL] –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ');
        Modal.confirm({
          title: '–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤',
          content: '–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
          onOk: () => {
            console.log('‚úÖ [SHIPPING LABEL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—á–∞—Ç—å');
            proceedWithShippingPrint();
          },
          onCancel: () => {
            console.log('‚ùå [SHIPPING LABEL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –ø–µ—á–∞—Ç—å');
            setIsLoading(false);
          }
        });
        return;
      }

      console.log('‚úÖ [SHIPPING LABEL] –ü—Ä–∏–Ω—Ç–µ—Ä –≥–æ—Ç–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–µ—á–∞—Ç—å');
      await proceedWithShippingPrint();
    } catch (error) {
      console.error('üö® [SHIPPING LABEL] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        name: error instanceof Error ? error.name : 'UnknownError'
      });
      message.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      console.log('üèÅ [SHIPPING LABEL] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏');
      setIsLoading(false);
    }
  };

  const proceedWithShippingPrint = async () => {
    console.log('üöÄ [SHIPPING PRINT] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏...');
    
    const requestData = {
      orderId,
      customerName,
      items: printableItems,
      copies: 1
    };
    
    console.log('üì¶ [SHIPPING PRINT] –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', requestData);
    
    try {
      console.log('üåê [SHIPPING PRINT] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST /api/print/shipping-label');
      
      const response = await fetch('/api/print/shipping-label', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      });

      console.log('üì° [SHIPPING PRINT] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        headers: Object.fromEntries(response.headers.entries())
      });

      if (!response.ok) {
        console.error('‚ùå [SHIPPING PRINT] HTTP –æ—à–∏–±–∫–∞:', response.status);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('üì¶ [SHIPPING PRINT] –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
      
      if (data.success) {
        console.log('‚úÖ [SHIPPING PRINT] –ü–µ—á–∞—Ç—å —É—Å–ø–µ—à–Ω–∞, jobId:', data.jobId);
        message.success('–≠—Ç–∏–∫–µ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–µ—á–∞—Ç—å');
        setLastPrintJob(data.jobId);
        onPrintComplete?.(data.jobId, 'shipping');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ RIVHIT API
        console.log('üîÑ [SHIPPING PRINT] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞...');
        await updateOrderStatus('shipping_label_printed', data.jobId, 'shipping');
      } else {
        console.error('‚ùå [SHIPPING PRINT] –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ:', data.error);
        handlePrintError(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏', '–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏');
      }
    } catch (error) {
      console.error('üö® [SHIPPING PRINT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        name: error instanceof Error ? error.name : 'UnknownError'
      });
      handlePrintError(error instanceof Error ? error.message : String(error), '–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–µ—á–∞—Ç—å');
    }
  };

  const printProductLabels = async () => {
    console.log('üî• [FRONTEND DEBUG] =====================================');
    console.log('üî• [FRONTEND DEBUG] PRODUCT LABELS PRINT BUTTON CLICKED!');
    console.log('üî• [FRONTEND DEBUG] This should be visible in browser console!');
    console.log('üî• [FRONTEND DEBUG] =====================================');
    
    console.log('üîç [PRODUCT PRINT] Checking printable items...');
    console.log('üìã [PRODUCT PRINT] All items:', items.length);
    console.log('üì¶ [PRODUCT PRINT] Filtered printable items:', printableItems.length);
    console.log('üîç [PRODUCT PRINT] Items details:', items.map(item => ({
      id: item.item_id,
      isPacked: item.isPacked,
      isAvailable: item.isAvailable, 
      packedQuantity: item.packedQuantity,
      name: item.item_name
    })));
    
    if (printableItems.length === 0) {
      console.warn('‚ö†Ô∏è [PRODUCT PRINT] No printable items found');
      console.log('üî• [FRONTEND DEBUG] About to show warning message...');
      message.warning('–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–æ–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–≤–∞—Ä—ã —É–ø–∞–∫–æ–≤–∞–Ω—ã (isPacked=true, isAvailable=true, packedQuantity>0)');
      
      // Show detailed modal with printer settings button for debugging
      Modal.warning({
        title: '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏',
        content: (
          <div>
            <Alert
              message="–¢–æ–≤–∞—Ä—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ –ø–µ—á–∞—Ç–∏"
              description={`–ò–∑ ${items.length} —Ç–æ–≤–∞—Ä–æ–≤, 0 –≥–æ—Ç–æ–≤—ã –∫ –ø–µ—á–∞—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–æ–≤–∞—Ä—ã —É–ø–∞–∫–æ–≤–∞–Ω—ã.`}
              type="warning"
              showIcon
              style={{ marginBottom: 16 }}
            />
            <Text type="secondary">
              –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏:
            </Text>
            <ul style={{ marginTop: 8, marginBottom: 16 }}>
              <li>isPacked = true (—Ç–æ–≤–∞—Ä —É–ø–∞–∫–æ–≤–∞–Ω)</li>
              <li>isAvailable = true (—Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω)</li>
              <li>packedQuantity &gt; 0 (—É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ –Ω—É–ª—è)</li>
            </ul>
          </div>
        ),
        okText: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞',
        onOk: () => {
          console.log('üîß [PRODUCT PRINT] Opening printer settings for debugging...');
          setShowPrinterSettings(true);
        }
      });
      return;
    }

    setIsLoading(true);
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
      const isReady = await checkPrinterStatus();
      if (!isReady) {
        Modal.confirm({
          title: '–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤',
          content: '–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
          onOk: () => proceedWithProductPrint(),
          onCancel: () => setIsLoading(false)
        });
        return;
      }

      await proceedWithProductPrint();
    } catch (error) {
      console.error('Error printing product labels:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤');
    } finally {
      setIsLoading(false);
    }
  };

  const proceedWithProductPrint = async () => {
    console.log('üî• [FRONTEND DEBUG] =====================================');
    console.log('üî• [FRONTEND DEBUG] PROCEEDING WITH PRODUCT PRINT!');
    console.log('üî• [FRONTEND DEBUG] This means items are ready for printing!');
    console.log('üî• [FRONTEND DEBUG] =====================================');
    
    console.log('üîç [PRODUCT PRINT] Starting product labels print...');
    console.log('üìã [PRODUCT PRINT] Items to print:', printableItems.length);
    console.log('üì¶ [PRODUCT PRINT] Printable items details:', printableItems);
    
    try {
      const requestData = {
        orderId,
        items: printableItems,
        options: {
          copies: 1,
          labelSize: 'medium',
          includeBarcodes: true,
          includeText: true,
          includeQuantity: true,
          includePrices: true
        }
      };
      
      console.log('üì¶ [PRODUCT PRINT] Request data:', requestData);
      console.log('üåê [PRODUCT PRINT] Using enhanced API service for comprehensive logging...');
      
      // Use enhanced API service to forward backend logs to frontend console
      const data = await fetch('/api/print/product-labels', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      }).then(async (response) => {
        console.log('üì° [PRODUCT PRINT] Response status:', response.status);
        console.log('üì° [PRODUCT PRINT] Response headers:', Object.fromEntries(response.headers.entries()));
        
        const responseText = await response.text();
        console.log('üìÑ [PRODUCT PRINT] Raw response text:', responseText);
        
        let data: any;
        try {
          data = JSON.parse(responseText);
        } catch (parseError) {
          console.error('‚ùå [PRODUCT PRINT] JSON parse error:', parseError);
          throw new Error('Invalid JSON response from server');
        }
        
        // Forward any backend debug logs to frontend console
        if (data.debug) {
          console.log('üîç [BACKEND DEBUG] Debug info from server:', data.debug);
        }
        
        if (data.logs && Array.isArray(data.logs)) {
          console.log('üîç [BACKEND LOGS] Server logs:');
          data.logs.forEach((log: any, index: number) => {
            console.log(`üîç [BACKEND LOG ${index + 1}]`, log);
          });
        }
        
        if (!response.ok) {
          console.error('‚ùå [PRODUCT PRINT] HTTP error:', response.status, data);
          throw new Error(`HTTP ${response.status}: ${data?.error || response.statusText}`);
        }
        
        return data;
      });
      
      console.log('üì¶ [PRODUCT PRINT] Final response data:', data);
      
      if (data.success) {
        console.log('‚úÖ [PRODUCT PRINT] Print job successful');
        message.success(`–≠—Ç–∏–∫–µ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–µ—á–∞—Ç—å (${data.printedItems} —à—Ç.)`);
        setLastPrintJob(data.jobId);
        onPrintComplete?.(data.jobId, 'product');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ RIVHIT API
        console.log('üîÑ [PRODUCT PRINT] Updating order status...');
        await updateOrderStatus('product_labels_printed', data.jobId, 'product');
      } else {
        console.error('‚ùå [PRODUCT PRINT] Error in response:', data.error);
        handlePrintError(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏', '–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤');
      }
    } catch (error) {
      console.error('üö® [PRODUCT PRINT] Critical error:', {
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined
      });
      
      // Ensure error modal appears with printer settings button
      handlePrintError(
        error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
        '–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤'
      );
    }
  };

  const testPrint = async () => {
    console.log('üñ®Ô∏è [TEST PRINT] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–µ—á–∞—Ç—å...');
    console.log('üìã [TEST PRINT] –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
      orderId,
      customerName,
      itemsCount: items.length,
      disabled
    });
    
    setIsLoading(true);
    try {
      console.log('üåê [TEST PRINT] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/print/test');
      
      const response = await fetch('/api/print/test', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });

      console.log('üì° [TEST PRINT] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      });

      if (!response.ok) {
        console.error('‚ùå [TEST PRINT] HTTP –æ—à–∏–±–∫–∞:', response.status, response.statusText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('üì¶ [TEST PRINT] –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
      
      if (data.success) {
        console.log('‚úÖ [TEST PRINT] –¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—á–∞—Ç—å —É—Å–ø–µ—à–Ω–∞');
        message.success('–¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
      } else {
        console.error('‚ùå [TEST PRINT] –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ:', data.error);
        handlePrintError(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–µ—á–∞—Ç–∏', '–¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—á–∞—Ç—å');
      }
    } catch (error) {
      console.error('üö® [TEST PRINT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        name: error instanceof Error ? error.name : 'UnknownError'
      });
      handlePrintError(
        error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
        '–¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—á–∞—Ç—å'
      );
    } finally {
      console.log('üèÅ [TEST PRINT] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–µ—á–∞—Ç–∏');
      setIsLoading(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã (◊ó◊©◊ë◊ï◊†◊ô◊™)
  const createInvoice = async () => {
    console.log('üîµ [FRONTEND] Starting invoice creation');
    console.log('üìã Available data:', {
      orderNumber,
      orderId,
      customerName,
      customerData,
      printableItems_count: printableItems.length,
      printableItems
    });

    if (printableItems.length === 0) {
      message.warning('–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã');
      return;
    }

    if (!orderNumber) {
      console.error('‚ùå No order number provided');
      message.error('–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞');
      return;
    }

    Modal.confirm({
      title: '–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã (◊ó◊©◊ë◊ï◊†◊ô◊™)',
      content: (
        <Space direction="vertical">
          <Text>–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {orderNumber}</Text>
          <Text type="secondary">–¢–æ–≤–∞—Ä–æ–≤: {printableItems.length}</Text>
          <Text type="secondary">
            –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {printableItems.reduce((sum, item) => sum + item.packedQuantity, 0)}
          </Text>
        </Space>
      ),
      okText: '–°–æ–∑–¥–∞—Ç—å ◊ó◊©◊ë◊ï◊†◊ô◊™',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      onOk: async () => {
        setIsLoading(true);
        try {
          // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞
          const invoiceItems = printableItems.map(item => {
            const invoiceItem = {
              item_id: item.item_id,
              item_name: item.item_name || item.item_extended_description || 'Unknown Item',
              quantity: item.packedQuantity, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
              price: item.sale_nis || (item as any).price || 0,
              cost_nis: item.cost_nis || 0
            };
            console.log('üì¶ Prepared item:', invoiceItem);
            return invoiceItem;
          });

          const cleanOrderNumber = orderNumber.replace(/[^\d]/g, ''); // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
          
          const requestData = {
            orderNumber: cleanOrderNumber,
            items: invoiceItems,
            customerData: customerData || { 
              customer_id: orderId,
              customer_name: customerName 
            }
          };

          console.log('üì° [FRONTEND] Sending request to backend:', JSON.stringify(requestData, null, 2));

          const response = await fetch('/api/invoices/create-from-order', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData)
          });

          const data = await response.json();
          
          if (data.success) {
            message.success('–°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞ (◊ó◊©◊ë◊ï◊†◊ô◊™) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            onPrintComplete?.('invoice_created', 'invoice');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—á–∞—Ç–∞–µ–º —ç—Ç–∏–∫–µ—Ç–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞
            Modal.confirm({
              title: '–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–æ–∫',
              content: '–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω. –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤?',
              okText: '–ü–µ—á–∞—Ç—å',
              cancelText: '–ü–æ–∑–∂–µ',
              onOk: () => printProductLabels()
            });
          } else if (data.preparedData) {
            // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            Modal.info({
              title: '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã',
              content: (
                <div>
                  <Alert 
                    message="–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ" 
                    description={data.enableWrites}
                    type="warning"
                    showIcon
                  />
                  <pre style={{ fontSize: '12px', marginTop: '10px' }}>
                    {JSON.stringify(data.preparedData, null, 2)}
                  </pre>
                </div>
              ),
              width: 600
            });
          } else {
            message.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: ${data.error}`);
          }
        } catch (error) {
          console.error('Error creating invoice:', error);
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã');
        } finally {
          setIsLoading(false);
        }
      }
    });
  };

  const showPrinterStatus = async () => {
    await checkPrinterStatus();
    setShowStatusModal(true);
  };

  const getStatusBadge = (status: PrinterStatus) => {
    if (!status.connected) {
      return <Badge status="error" text="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω" />;
    }
    if (!status.isReady) {
      return <Badge status="warning" text="–ù–µ –≥–æ—Ç–æ–≤" />;
    }
    return <Badge status="success" text="–ì–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏" />;
  };

  const getLevelColor = (level: number) => {
    if (level < 20) return '#ff4d4f';
    if (level < 50) return '#faad14';
    return '#52c41a';
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤ RIVHIT API
  const updateOrderStatus = async (status: string, jobId: string, printType: 'shipping' | 'product') => {
    try {
      const packingData = {
        packedItems: printableItems.map(item => ({
          item_id: item.item_id,
          packed_quantity: item.packedQuantity,
          notes: item.notes,
          reason: item.reason
        })),
        packer: 'system', // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        packaging_date: new Date().toISOString(),
        print_jobs: [{
          job_id: jobId,
          type: printType,
          timestamp: new Date().toISOString()
        }]
      };

      const response = await fetch(`/api/orders/${orderId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          status,
          packingData
        })
      });

      const data = await response.json();
      
      if (data.success) {
        console.log(`Order status updated: ${status}`);
      } else {
        console.warn('Failed to update order status, will retry later:', data.error);
      }
    } catch (error) {
      console.error('Error updating order status:', error);
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –ø–µ—á–∞—Ç—å —É–∂–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    }
  };

  return (
    <>
      <Card 
        title={
          <Space>
            <PrinterOutlined />
            <Text strong>–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–æ–∫</Text>
            <Text type="secondary">({printableItems.length} —Ç–æ–≤–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤–æ)</Text>
          </Space>
        }
        size="small"
        extra={
          <Button
            size="small"
            icon={<ReloadOutlined />}
            onClick={showPrinterStatus}
            type="text"
          >
            –°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
          </Button>
        }
      >
        <Space direction="vertical" style={{ width: '100%' }}>
          {printableItems.length === 0 && (
            <Alert
              message="–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏"
              description="–í—ã–±–µ—Ä–∏—Ç–µ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–æ–∫"
              type="warning"
              showIcon
            />
          )}
          
          <Space wrap>
            <Tooltip title="–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä—É (◊ó◊©◊ë◊ï◊†◊ô◊™) –∏ –∑–∞—Ç–µ–º –ø–µ—á–∞—Ç–∞—Ç—å">
              <Button
                type="primary"
                icon={<FileDoneOutlined />}
                onClick={createInvoice}
                loading={isLoading}
                disabled={disabled || printableItems.length === 0}
                style={{ backgroundColor: '#52c41a', borderColor: '#52c41a' }}
              >
                –°–æ–∑–¥–∞—Ç—å ◊ó◊©◊ë◊ï◊†◊ô◊™
              </Button>
            </Tooltip>

            <Divider type="vertical" />

            <Tooltip title="–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–∞">
              <Button
                icon={<FileTextOutlined />}
                onClick={printShippingLabel}
                loading={isLoading}
                disabled={disabled || printableItems.length === 0}
              >
                –≠—Ç–∏–∫–µ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
              </Button>
            </Tooltip>

            <Tooltip title="–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ">
              <Button
                icon={<BarcodeOutlined />}
                onClick={printProductLabels}
                loading={isLoading}
                disabled={disabled || printableItems.length === 0}
              >
                –≠—Ç–∏–∫–µ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ ({printableItems.length})
              </Button>
            </Tooltip>

            <Divider type="vertical" />

            <Tooltip title="–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä—É (◊ó◊©◊ë◊ï◊†◊ô◊™) –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ RIVHIT">
              <Button
                type="primary"
                danger
                icon={<FileDoneOutlined />}
                onClick={createInvoice}
                loading={isLoading}
                disabled={disabled || printableItems.length === 0}
              >
                –°–æ–∑–¥–∞—Ç—å ◊ó◊©◊ë◊ï◊†◊ô◊™
              </Button>
            </Tooltip>

            <BoxLabelPrint
              orderId={orderId}
              items={printableItems}
              customerName={customerName}
              customerCity={customerCity}
              onPrintComplete={(success) => {
                if (success) {
                  message.success('–≠—Ç–∏–∫–µ—Ç–∫–∏ –∫–æ—Ä–æ–±–æ–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω—ã');
                  onPrintComplete?.('box_labels', 'box');
                }
              }}
            />

            <Button
              size="small"
              icon={<PrinterOutlined />}
              onClick={testPrint}
              loading={isLoading}
              disabled={disabled}
              type="text"
            >
              –¢–µ—Å—Ç
            </Button>
          </Space>

          {lastPrintJob && (
            <Alert
              message={`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏: ${lastPrintJob}`}
              type="info"
              closable
              onClose={() => setLastPrintJob(null)}
            />
          )}
        </Space>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ */}
      <Modal
        title="–°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ GoDEX ZX420"
        open={showStatusModal}
        onCancel={() => setShowStatusModal(false)}
        footer={[
          <Button key="refresh" icon={<ReloadOutlined />} onClick={checkPrinterStatus}>
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>,
          <Button key="close" onClick={() => setShowStatusModal(false)}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        ]}
        width={600}
      >
        {printerStatus ? (
          <Space direction="vertical" style={{ width: '100%' }}>
            <Descriptions bordered size="small">
              <Descriptions.Item label="–°—Ç–∞—Ç—É—Å" span={3}>
                {getStatusBadge(printerStatus)}
              </Descriptions.Item>
              <Descriptions.Item label="–ú–æ–¥–µ–ª—å">
                {printerStatus.model}
              </Descriptions.Item>
              <Descriptions.Item label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞">
                {printerStatus.temperature}¬∞C
              </Descriptions.Item>
              <Descriptions.Item label="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ">
                {printerStatus.connected ? (
                  <CheckCircleOutlined style={{ color: '#52c41a' }} />
                ) : (
                  <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />
                )}
              </Descriptions.Item>
              <Descriptions.Item label="–£—Ä–æ–≤–µ–Ω—å –±—É–º–∞–≥–∏">
                <Text style={{ color: getLevelColor(printerStatus.paperLevel) }}>
                  {printerStatus.paperLevel}%
                </Text>
              </Descriptions.Item>
              <Descriptions.Item label="–£—Ä–æ–≤–µ–Ω—å –ª–µ–Ω—Ç—ã">
                <Text style={{ color: getLevelColor(printerStatus.ribbonLevel) }}>
                  {printerStatus.ribbonLevel}%
                </Text>
              </Descriptions.Item>
            </Descriptions>

            {printerStatus.lastError && (
              <Alert
                message="–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞"
                description={printerStatus.lastError}
                type="error"
                showIcon
              />
            )}

            {!printerStatus.isReady && (
              <Alert
                message="–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏"
                description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —É—Ä–æ–≤–µ–Ω—å –±—É–º–∞–≥–∏ –∏ –ª–µ–Ω—Ç—ã"
                type="warning"
                showIcon
              />
            )}
          </Space>
        ) : (
          <div style={{ textAlign: 'center', padding: '20px' }}>
            <Spin tip="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞..." />
          </div>
        )}
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ */}
      <Modal
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞"
        open={showPrinterSettings}
        onCancel={() => setShowPrinterSettings(false)}
        footer={null}
        width={800}
        style={{ top: 20 }}
      >
        <PrinterSettings
          onSave={(config) => {
            console.log('üîß [PRINTER SETTINGS] Settings saved:', config);
            message.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            setShowPrinterSettings(false);
            // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            setTimeout(() => checkPrinterStatus(), 1000);
          }}
        />
      </Modal>
    </>
  );
};