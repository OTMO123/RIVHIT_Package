import React, { useState } from 'react';
import { 
  Button, 
  Space, 
  Modal, 
  message, 
  Typography, 
  Card,
  Spin,
  Alert,
  Descriptions,
  Badge,
  Tooltip,
  Divider
} from 'antd';
import { 
  PrinterOutlined, 
  FileTextOutlined, 
  BarcodeOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  ReloadOutlined,
  InboxOutlined,
  FileDoneOutlined
} from '@ant-design/icons';
import { PackingItem } from '@packing/shared';
import { BoxLabelPrint } from './BoxLabelPrint';

const { Text, Title } = Typography;

interface PrintActionsProps {
  orderId: string;
  items: PackingItem[];
  customerName?: string;
  customerCity?: string;
  customerData?: any; // Full customer data for invoice
  disabled?: boolean;
  onPrintComplete?: (jobId: string, type: 'shipping' | 'product' | 'box' | 'invoice') => void;
  orderNumber?: string; // Order number for invoice reference
}

interface PrinterStatus {
  connected: boolean;
  model: string;
  paperLevel: number;
  ribbonLevel: number;
  temperature: number;
  isReady: boolean;
  lastError?: string;
}

export const PrintActions: React.FC<PrintActionsProps> = ({
  orderId,
  items,
  customerName = '◊ú◊ß◊ï◊ó',
  customerCity,
  customerData,
  disabled = false,
  onPrintComplete,
  orderNumber
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [printerStatus, setPrinterStatus] = useState<PrinterStatus | null>(null);
  const [showStatusModal, setShowStatusModal] = useState(false);
  const [lastPrintJob, setLastPrintJob] = useState<string | null>(null);

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–µ—á–∞—Ç–∏
  const printableItems = items.filter(item => 
    item.isPacked && 
    item.isAvailable && 
    item.packedQuantity > 0
  );

  const checkPrinterStatus = async () => {
    try {
      const response = await fetch('/api/print/status');
      const data = await response.json();
      
      if (data.success) {
        setPrinterStatus(data.status);
        return data.status.isReady;
      } else {
        message.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞');
        return false;
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É');
      return false;
    }
  };

  const printShippingLabel = async () => {
    if (printableItems.length === 0) {
      message.warning('–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏');
      return;
    }

    setIsLoading(true);
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
      const isReady = await checkPrinterStatus();
      if (!isReady) {
        Modal.confirm({
          title: '–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤',
          content: '–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
          onOk: () => proceedWithShippingPrint(),
          onCancel: () => setIsLoading(false)
        });
        return;
      }

      await proceedWithShippingPrint();
    } catch (error) {
      console.error('Error printing shipping label:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏');
    } finally {
      setIsLoading(false);
    }
  };

  const proceedWithShippingPrint = async () => {
    try {
      const response = await fetch('/api/print/shipping-label', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderId,
          customerName,
          items: printableItems,
          copies: 1
        })
      });

      const data = await response.json();
      
      if (data.success) {
        message.success('–≠—Ç–∏–∫–µ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–µ—á–∞—Ç—å');
        setLastPrintJob(data.jobId);
        onPrintComplete?.(data.jobId, 'shipping');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ RIVHIT API
        await updateOrderStatus('shipping_label_printed', data.jobId, 'shipping');
      } else {
        message.error(`–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: ${data.error}`);
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –ø–µ—á–∞—Ç—å');
    }
  };

  const printProductLabels = async () => {
    if (printableItems.length === 0) {
      message.warning('–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–æ–∫');
      return;
    }

    setIsLoading(true);
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
      const isReady = await checkPrinterStatus();
      if (!isReady) {
        Modal.confirm({
          title: '–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤',
          content: '–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
          onOk: () => proceedWithProductPrint(),
          onCancel: () => setIsLoading(false)
        });
        return;
      }

      await proceedWithProductPrint();
    } catch (error) {
      console.error('Error printing product labels:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤');
    } finally {
      setIsLoading(false);
    }
  };

  const proceedWithProductPrint = async () => {
    try {
      const response = await fetch('/api/print/product-labels', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderId,
          items: printableItems,
          options: {
            copies: 1,
            labelSize: 'medium',
            includeBarcodes: true,
            includeText: true,
            includeQuantity: true,
            includePrices: true
          }
        })
      });

      const data = await response.json();
      
      if (data.success) {
        message.success(`–≠—Ç–∏–∫–µ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–µ—á–∞—Ç—å (${data.printedItems} —à—Ç.)`);
        setLastPrintJob(data.jobId);
        onPrintComplete?.(data.jobId, 'product');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ RIVHIT API
        await updateOrderStatus('product_labels_printed', data.jobId, 'product');
      } else {
        message.error(`–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: ${data.error}`);
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –ø–µ—á–∞—Ç—å');
    }
  };

  const testPrint = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/print/test', {
        method: 'POST'
      });

      const data = await response.json();
      
      if (data.success) {
        message.success('–¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
      } else {
        message.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–µ—á–∞—Ç–∏: ${data.error}`);
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–µ—á–∞—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã (◊ó◊©◊ë◊ï◊†◊ô◊™)
  const createInvoice = async () => {
    console.log('üîµ [FRONTEND] Starting invoice creation');
    console.log('üìã Available data:', {
      orderNumber,
      orderId,
      customerName,
      customerData,
      printableItems_count: printableItems.length,
      printableItems
    });

    if (printableItems.length === 0) {
      message.warning('–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã');
      return;
    }

    if (!orderNumber) {
      console.error('‚ùå No order number provided');
      message.error('–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞');
      return;
    }

    Modal.confirm({
      title: '–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã (◊ó◊©◊ë◊ï◊†◊ô◊™)',
      content: (
        <Space direction="vertical">
          <Text>–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {orderNumber}</Text>
          <Text type="secondary">–¢–æ–≤–∞—Ä–æ–≤: {printableItems.length}</Text>
          <Text type="secondary">
            –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {printableItems.reduce((sum, item) => sum + item.packedQuantity, 0)}
          </Text>
        </Space>
      ),
      okText: '–°–æ–∑–¥–∞—Ç—å ◊ó◊©◊ë◊ï◊†◊ô◊™',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      onOk: async () => {
        setIsLoading(true);
        try {
          // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞
          const invoiceItems = printableItems.map(item => {
            const invoiceItem = {
              item_id: item.item_id,
              item_name: item.item_name || item.item_extended_description || 'Unknown Item',
              quantity: item.packedQuantity, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
              price: item.sale_nis || (item as any).price || 0,
              cost_nis: item.cost_nis || 0
            };
            console.log('üì¶ Prepared item:', invoiceItem);
            return invoiceItem;
          });

          const cleanOrderNumber = orderNumber.replace(/[^\d]/g, ''); // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
          
          const requestData = {
            orderNumber: cleanOrderNumber,
            items: invoiceItems,
            customerData: customerData || { 
              customer_id: orderId,
              customer_name: customerName 
            }
          };

          console.log('üì° [FRONTEND] Sending request to backend:', JSON.stringify(requestData, null, 2));

          const response = await fetch('/api/invoices/create-from-order', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData)
          });

          const data = await response.json();
          
          if (data.success) {
            message.success('–°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞ (◊ó◊©◊ë◊ï◊†◊ô◊™) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            onPrintComplete?.('invoice_created', 'invoice');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—á–∞—Ç–∞–µ–º —ç—Ç–∏–∫–µ—Ç–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞
            Modal.confirm({
              title: '–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–æ–∫',
              content: '–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω. –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤?',
              okText: '–ü–µ—á–∞—Ç—å',
              cancelText: '–ü–æ–∑–∂–µ',
              onOk: () => printProductLabels()
            });
          } else if (data.preparedData) {
            // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            Modal.info({
              title: '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã',
              content: (
                <div>
                  <Alert 
                    message="–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ" 
                    description={data.enableWrites}
                    type="warning"
                    showIcon
                  />
                  <pre style={{ fontSize: '12px', marginTop: '10px' }}>
                    {JSON.stringify(data.preparedData, null, 2)}
                  </pre>
                </div>
              ),
              width: 600
            });
          } else {
            message.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: ${data.error}`);
          }
        } catch (error) {
          console.error('Error creating invoice:', error);
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã');
        } finally {
          setIsLoading(false);
        }
      }
    });
  };

  const showPrinterStatus = async () => {
    await checkPrinterStatus();
    setShowStatusModal(true);
  };

  const getStatusBadge = (status: PrinterStatus) => {
    if (!status.connected) {
      return <Badge status="error" text="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω" />;
    }
    if (!status.isReady) {
      return <Badge status="warning" text="–ù–µ –≥–æ—Ç–æ–≤" />;
    }
    return <Badge status="success" text="–ì–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏" />;
  };

  const getLevelColor = (level: number) => {
    if (level < 20) return '#ff4d4f';
    if (level < 50) return '#faad14';
    return '#52c41a';
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤ RIVHIT API
  const updateOrderStatus = async (status: string, jobId: string, printType: 'shipping' | 'product') => {
    try {
      const packingData = {
        packedItems: printableItems.map(item => ({
          item_id: item.item_id,
          packed_quantity: item.packedQuantity,
          notes: item.notes,
          reason: item.reason
        })),
        packer: 'system', // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        packaging_date: new Date().toISOString(),
        print_jobs: [{
          job_id: jobId,
          type: printType,
          timestamp: new Date().toISOString()
        }]
      };

      const response = await fetch(`/api/orders/${orderId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          status,
          packingData
        })
      });

      const data = await response.json();
      
      if (data.success) {
        console.log(`Order status updated: ${status}`);
      } else {
        console.warn('Failed to update order status, will retry later:', data.error);
      }
    } catch (error) {
      console.error('Error updating order status:', error);
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –ø–µ—á–∞—Ç—å —É–∂–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    }
  };

  return (
    <>
      <Card 
        title={
          <Space>
            <PrinterOutlined />
            <Text strong>–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–æ–∫</Text>
            <Text type="secondary">({printableItems.length} —Ç–æ–≤–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤–æ)</Text>
          </Space>
        }
        size="small"
        extra={
          <Button
            size="small"
            icon={<ReloadOutlined />}
            onClick={showPrinterStatus}
            type="text"
          >
            –°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
          </Button>
        }
      >
        <Space direction="vertical" style={{ width: '100%' }}>
          {printableItems.length === 0 && (
            <Alert
              message="–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏"
              description="–í—ã–±–µ—Ä–∏—Ç–µ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–æ–∫"
              type="warning"
              showIcon
            />
          )}
          
          <Space wrap>
            <Tooltip title="–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä—É (◊ó◊©◊ë◊ï◊†◊ô◊™) –∏ –∑–∞—Ç–µ–º –ø–µ—á–∞—Ç–∞—Ç—å">
              <Button
                type="primary"
                icon={<FileDoneOutlined />}
                onClick={createInvoice}
                loading={isLoading}
                disabled={disabled || printableItems.length === 0}
                style={{ backgroundColor: '#52c41a', borderColor: '#52c41a' }}
              >
                –°–æ–∑–¥–∞—Ç—å ◊ó◊©◊ë◊ï◊†◊ô◊™
              </Button>
            </Tooltip>

            <Divider type="vertical" />

            <Tooltip title="–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–∞">
              <Button
                icon={<FileTextOutlined />}
                onClick={printShippingLabel}
                loading={isLoading}
                disabled={disabled || printableItems.length === 0}
              >
                –≠—Ç–∏–∫–µ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
              </Button>
            </Tooltip>

            <Tooltip title="–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ">
              <Button
                icon={<BarcodeOutlined />}
                onClick={printProductLabels}
                loading={isLoading}
                disabled={disabled || printableItems.length === 0}
              >
                –≠—Ç–∏–∫–µ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ ({printableItems.length})
              </Button>
            </Tooltip>

            <Divider type="vertical" />

            <Tooltip title="–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä—É (◊ó◊©◊ë◊ï◊†◊ô◊™) –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ RIVHIT">
              <Button
                type="primary"
                danger
                icon={<FileDoneOutlined />}
                onClick={createInvoice}
                loading={isLoading}
                disabled={disabled || printableItems.length === 0}
              >
                –°–æ–∑–¥–∞—Ç—å ◊ó◊©◊ë◊ï◊†◊ô◊™
              </Button>
            </Tooltip>

            <BoxLabelPrint
              orderId={orderId}
              items={printableItems}
              customerName={customerName}
              customerCity={customerCity}
              onPrintComplete={(success) => {
                if (success) {
                  message.success('–≠—Ç–∏–∫–µ—Ç–∫–∏ –∫–æ—Ä–æ–±–æ–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω—ã');
                  onPrintComplete?.('box_labels', 'box');
                }
              }}
            />

            <Button
              size="small"
              icon={<PrinterOutlined />}
              onClick={testPrint}
              loading={isLoading}
              disabled={disabled}
              type="text"
            >
              –¢–µ—Å—Ç
            </Button>
          </Space>

          {lastPrintJob && (
            <Alert
              message={`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏: ${lastPrintJob}`}
              type="info"
              closable
              onClose={() => setLastPrintJob(null)}
            />
          )}
        </Space>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ */}
      <Modal
        title="–°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ GoDEX ZX420"
        open={showStatusModal}
        onCancel={() => setShowStatusModal(false)}
        footer={[
          <Button key="refresh" icon={<ReloadOutlined />} onClick={checkPrinterStatus}>
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>,
          <Button key="close" onClick={() => setShowStatusModal(false)}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        ]}
        width={600}
      >
        {printerStatus ? (
          <Space direction="vertical" style={{ width: '100%' }}>
            <Descriptions bordered size="small">
              <Descriptions.Item label="–°—Ç–∞—Ç—É—Å" span={3}>
                {getStatusBadge(printerStatus)}
              </Descriptions.Item>
              <Descriptions.Item label="–ú–æ–¥–µ–ª—å">
                {printerStatus.model}
              </Descriptions.Item>
              <Descriptions.Item label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞">
                {printerStatus.temperature}¬∞C
              </Descriptions.Item>
              <Descriptions.Item label="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ">
                {printerStatus.connected ? (
                  <CheckCircleOutlined style={{ color: '#52c41a' }} />
                ) : (
                  <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />
                )}
              </Descriptions.Item>
              <Descriptions.Item label="–£—Ä–æ–≤–µ–Ω—å –±—É–º–∞–≥–∏">
                <Text style={{ color: getLevelColor(printerStatus.paperLevel) }}>
                  {printerStatus.paperLevel}%
                </Text>
              </Descriptions.Item>
              <Descriptions.Item label="–£—Ä–æ–≤–µ–Ω—å –ª–µ–Ω—Ç—ã">
                <Text style={{ color: getLevelColor(printerStatus.ribbonLevel) }}>
                  {printerStatus.ribbonLevel}%
                </Text>
              </Descriptions.Item>
            </Descriptions>

            {printerStatus.lastError && (
              <Alert
                message="–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞"
                description={printerStatus.lastError}
                type="error"
                showIcon
              />
            )}

            {!printerStatus.isReady && (
              <Alert
                message="–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏"
                description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —É—Ä–æ–≤–µ–Ω—å –±—É–º–∞–≥–∏ –∏ –ª–µ–Ω—Ç—ã"
                type="warning"
                showIcon
              />
            )}
          </Space>
        ) : (
          <div style={{ textAlign: 'center', padding: '20px' }}>
            <Spin tip="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞..." />
          </div>
        )}
      </Modal>
    </>
  );
};