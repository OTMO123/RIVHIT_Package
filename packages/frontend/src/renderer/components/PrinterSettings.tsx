import React, { useState, useEffect } from 'react';
import {
  Card,
  Form,
  Radio,
  Input,
  InputNumber,
  Button,
  Space,
  message,
  Typography,
  Row,
  Col,
  Switch,
  Divider,
  Select,
  Tooltip,
  Alert
} from 'antd';
import {
  PrinterOutlined,
  UsbOutlined,
  WifiOutlined,
  InfoCircleOutlined,
  ExperimentOutlined,
  SaveOutlined,
  SearchOutlined,
  LoadingOutlined,
  CheckCircleOutlined
} from '@ant-design/icons';

const { Title, Text } = Typography;
const { Option } = Select;

interface PrinterConfig {
  connectionType: 'usb' | 'network';
  // USB –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  usbPort: string;
  printerModel: string;
  // –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  networkIp: string;
  networkPort: number;
  // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  printerName: string;
  enabled: boolean;
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—á–∞—Ç–∏
  printSpeed: number;
  printDensity: number;
  labelWidth: number;
  labelHeight: number;
}

interface PrinterSettingsProps {
  onSave?: (config: PrinterConfig) => void;
}

interface FoundPrinter {
  ip: string;
  port: number;
  name: string;
  status: 'online' | 'offline';
  responseTime?: number;
}

export const PrinterSettings: React.FC<PrinterSettingsProps> = ({ onSave }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [testing, setTesting] = useState(false);
  const [scanning, setScanning] = useState(false);
  const [foundPrinters, setFoundPrinters] = useState<FoundPrinter[]>([]);
  const [config, setConfig] = useState<PrinterConfig>({
    connectionType: 'usb',
    usbPort: 'USB001',
    printerModel: 'GoDEX ZX420i',
    networkIp: '192.168.1.100',
    networkPort: 9100,
    printerName: 'BRAVO Printer',
    enabled: true,
    printSpeed: 2,
    printDensity: 10,
    labelWidth: 100,
    labelHeight: 150
  });

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    loadPrinterConfig();
  }, []);

  const loadPrinterConfig = async () => {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API –∏–ª–∏ localStorage
      const savedConfig = localStorage.getItem('printerConfig');
      if (savedConfig) {
        const parsedConfig = JSON.parse(savedConfig);
        setConfig(parsedConfig);
        form.setFieldsValue(parsedConfig);
      } else {
        form.setFieldsValue(config);
      }
    } catch (error) {
      console.error('Error loading printer config:', error);
      form.setFieldsValue(config);
    }
  };

  const handleSave = async () => {
    try {
      setLoading(true);
      const values = await form.validateFields();
      const newConfig = { ...config, ...values };
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
      localStorage.setItem('printerConfig', JSON.stringify(newConfig));
      
      setConfig(newConfig);
      
      // –í—ã–∑–≤–∞—Ç—å callback –µ—Å–ª–∏ –µ—Å—Ç—å
      if (onSave) {
        onSave(newConfig);
      }
      
      message.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      console.error('Error saving printer config:', error);
      message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setLoading(false);
    }
  };

  const handleTest = async () => {
    try {
      setTesting(true);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–µ—á–∞—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      message.success('–¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä');
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–µ—á–∞—Ç–∏');
    } finally {
      setTesting(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º IP
  const checkPrinterPort = async (ip: string, port: number): Promise<boolean> => {
    try {
      const startTime = Date.now();
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç

      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É —á–µ—Ä–µ–∑ fetch (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
      const response = await fetch(`http://${ip}:${port}`, {
        method: 'GET',
        signal: controller.signal,
        mode: 'no-cors' // –ò–∑–±–µ–≥–∞–µ–º CORS –ø—Ä–æ–±–ª–µ–º
      });

      clearTimeout(timeoutId);
      const responseTime = Date.now() - startTime;
      
      console.log(`‚úÖ –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω –Ω–∞ ${ip}:${port} (–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms)`);
      return true;
    } catch (error) {
      // –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —ç—Ç–æ–º –ø–æ—Ä—Ç—É
      return false;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
  const scanForPrinters = async () => {
    try {
      setScanning(true);
      setFoundPrinters([]);
      message.info('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...', 3);

      // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–¥—Å–µ—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
      const baseIps = ['192.168.1', '192.168.0', '10.0.0', '172.16.0'];
      const ports = [9100, 9101, 9102, 515]; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
      const printers: FoundPrinter[] = [];

      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥—Å–µ—Ç—è—Ö...');
      console.log('üì° –°–∫–∞–Ω–∏—Ä—É–µ–º—ã–µ –ø–æ–¥—Å–µ—Ç–∏:', baseIps);
      console.log('üîå –°–∫–∞–Ω–∏—Ä—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã:', ports);

      // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –≤ –∫–∞–∂–¥–æ–π –ø–æ–¥—Å–µ—Ç–∏
      const promises: Promise<void>[] = [];
      
      for (const baseIp of baseIps) {
        // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
        const popularIPs = [1, 2, 3, 4, 5, 10, 20, 50, 100, 101, 102, 150, 200, 254];
        
        for (const ip of popularIPs) {
          const fullIp = `${baseIp}.${ip}`;
          
          for (const port of ports) {
            promises.push(
              checkPrinterPort(fullIp, port).then((isOnline) => {
                if (isOnline) {
                  const printer: FoundPrinter = {
                    ip: fullIp,
                    port,
                    name: `–ü—Ä–∏–Ω—Ç–µ—Ä ${fullIp}:${port}`,
                    status: 'online'
                  };
                  
                  printers.push(printer);
                  console.log(`üñ®Ô∏è –ù–∞–π–¥–µ–Ω –ø—Ä–∏–Ω—Ç–µ—Ä: ${fullIp}:${port}`);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                  setFoundPrinters([...printers]);
                }
              }).catch(() => {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
              })
            );
          }
        }
      }

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
      await Promise.allSettled(promises);

      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ IP
      const uniquePrinters = printers.filter((printer, index, self) => 
        index === self.findIndex(p => p.ip === printer.ip)
      );

      setFoundPrinters(uniquePrinters);

      if (uniquePrinters.length > 0) {
        message.success(`–ù–∞–π–¥–µ–Ω–æ ${uniquePrinters.length} –ø—Ä–∏–Ω—Ç–µ—Ä(–æ–≤) –≤ —Å–µ—Ç–∏`);
      } else {
        message.warning('–ü—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–µ—Ç–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–π –∂–µ —Å–µ—Ç–∏.');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ç–∏');
    } finally {
      setScanning(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
  const selectPrinter = (printer: FoundPrinter) => {
    form.setFieldsValue({
      networkIp: printer.ip,
      networkPort: printer.port
    });
    setConfig(prev => ({
      ...prev,
      networkIp: printer.ip,
      networkPort: printer.port
    }));
    message.success(`–í—ã–±—Ä–∞–Ω –ø—Ä–∏–Ω—Ç–µ—Ä ${printer.ip}:${printer.port}`);
  };

  const connectionType = Form.useWatch('connectionType', form) || config.connectionType;

  return (
    <div>
      <Title level={4} style={{ marginBottom: 16, display: 'flex', alignItems: 'center', gap: 8 }}>
        <PrinterOutlined />
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
      </Title>

      <Form
        form={form}
        layout="vertical"
        initialValues={config}
        onValuesChange={(changedValues, allValues) => {
          setConfig({ ...config, ...allValues });
        }}
      >
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Card title="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" style={{ marginBottom: 16 }}>
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="printerName"
                label="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞' }]}
              >
                <Input placeholder="BRAVO Printer" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="enabled"
                label="–ü—Ä–∏–Ω—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω"
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="printerModel"
            label="–ú–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞"
            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞' }]}
          >
            <Select>
              <Option value="GoDEX ZX420i">GoDEX ZX420i</Option>
              <Option value="GoDEX ZX430i">GoDEX ZX430i</Option>
              <Option value="Zebra ZT230">Zebra ZT230</Option>
              <Option value="Zebra ZT410">Zebra ZT410</Option>
              <Option value="Generic EZPL">Generic EZPL</Option>
            </Select>
          </Form.Item>
        </Card>

        {/* –¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <Card title="–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" style={{ marginBottom: 16 }}>
          <Form.Item
            name="connectionType"
            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' }]}
          >
            <Radio.Group>
              <Space direction="vertical">
                <Radio value="usb">
                  <Space>
                    <UsbOutlined />
                    USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    <Tooltip title="–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ USB –∫–∞–±–µ–ª—å">
                      <InfoCircleOutlined />
                    </Tooltip>
                  </Space>
                </Radio>
                <Radio value="network">
                  <Space>
                    <WifiOutlined />
                    –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    <Tooltip title="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É –ø–æ —Å–µ—Ç–∏ TCP/IP">
                      <InfoCircleOutlined />
                    </Tooltip>
                  </Space>
                </Radio>
              </Space>
            </Radio.Group>
          </Form.Item>

          {connectionType === 'usb' && (
            <Card type="inner" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ USB" size="small">
              <Alert
                message="USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
                description="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É —á–µ—Ä–µ–∑ USB –∫–∞–±–µ–ª—å –∏ –≤–∫–ª—é—á–µ–Ω."
                type="info"
                showIcon
                style={{ marginBottom: 16 }}
              />
              
              <Form.Item
                name="usbPort"
                label="USB –ø–æ—Ä—Ç"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ USB –ø–æ—Ä—Ç' }]}
              >
                <Select>
                  <Option value="USB001">USB001</Option>
                  <Option value="USB002">USB002</Option>
                  <Option value="USB003">USB003</Option>
                  <Option value="COM1">COM1</Option>
                  <Option value="COM2">COM2</Option>
                  <Option value="COM3">COM3</Option>
                  <Option value="LPT1">LPT1</Option>
                </Select>
              </Form.Item>
            </Card>
          )}

          {connectionType === 'network' && (
            <Card type="inner" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏" size="small">
              <Alert
                message="–°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
                description="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–π –∂–µ —Å–µ—Ç–∏ –∏ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP –∞–¥—Ä–µ—Å."
                type="info"
                showIcon
                style={{ marginBottom: 16 }}
              />

              {/* –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ */}
              <Row style={{ marginBottom: 16 }}>
                <Col span={24}>
                  <Button
                    type="dashed"
                    icon={scanning ? <LoadingOutlined /> : <SearchOutlined />}
                    onClick={scanForPrinters}
                    loading={scanning}
                    style={{ width: '100%' }}
                  >
                    {scanning ? '–°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ç—å...' : '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ —Å–µ—Ç–∏'}
                  </Button>
                </Col>
              </Row>

              {/* –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ */}
              {foundPrinters.length > 0 && (
                <Card type="inner" title="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã" size="small" style={{ marginBottom: 16 }}>
                  <div style={{ maxHeight: 200, overflowY: 'auto' }}>
                    {foundPrinters.map((printer, index) => (
                      <Card
                        key={`${printer.ip}-${printer.port}`}
                        size="small"
                        style={{ marginBottom: 8 }}
                        hoverable
                        onClick={() => selectPrinter(printer)}
                      >
                        <Row align="middle" justify="space-between">
                          <Col>
                            <Space direction="vertical" size="small">
                              <Text strong>{printer.ip}:{printer.port}</Text>
                              <Text type="secondary" style={{ fontSize: '12px' }}>
                                {printer.name}
                              </Text>
                            </Space>
                          </Col>
                          <Col>
                            <Space>
                              <CheckCircleOutlined style={{ color: '#52c41a' }} />
                              <Text type="secondary" style={{ fontSize: '12px' }}>–û–Ω–ª–∞–π–Ω</Text>
                            </Space>
                          </Col>
                        </Row>
                      </Card>
                    ))}
                  </div>
                </Card>
              )}

              <Row gutter={16}>
                <Col span={16}>
                  <Form.Item
                    name="networkIp"
                    label={
                      <Space>
                        IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
                        <Tooltip title="–ö–ª–∏–∫–Ω–∏—Ç–µ '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫' –≤—ã—à–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ —Å–µ—Ç–∏">
                          <InfoCircleOutlined />
                        </Tooltip>
                      </Space>
                    }
                    rules={[
                      { required: true, message: '–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å' },
                      { pattern: /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å' }
                    ]}
                  >
                    <Input placeholder="192.168.1.100" />
                  </Form.Item>
                </Col>
                <Col span={8}>
                  <Form.Item
                    name="networkPort"
                    label="–ü–æ—Ä—Ç"
                    rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç' }]}
                  >
                    <Select placeholder="9100" style={{ width: '100%' }}>
                      <Option value={9100}>9100 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)</Option>
                      <Option value={9101}>9101</Option>
                      <Option value={9102}>9102</Option>
                      <Option value={515}>515 (LPD)</Option>
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
            </Card>
          )}
        </Card>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—á–∞—Ç–∏ */}
        <Card title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—á–∞—Ç–∏" style={{ marginBottom: 16 }}>
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="printSpeed"
                label={
                  <Space>
                    –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
                    <Tooltip title="–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ –æ—Ç 1 (–º–µ–¥–ª–µ–Ω–Ω–æ) –¥–æ 5 (–±—ã—Å—Ç—Ä–æ)">
                      <InfoCircleOutlined />
                    </Tooltip>
                  </Space>
                }
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏' }]}
              >
                <Select>
                  <Option value={1}>1 - –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ</Option>
                  <Option value={2}>2 - –ú–µ–¥–ª–µ–Ω–Ω–æ</Option>
                  <Option value={3}>3 - –ù–æ—Ä–º–∞–ª—å–Ω–æ</Option>
                  <Option value={4}>4 - –ë—ã—Å—Ç—Ä–æ</Option>
                  <Option value={5}>5 - –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="printDensity"
                label={
                  <Space>
                    –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
                    <Tooltip title="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ –æ—Ç 1 (—Å–≤–µ—Ç–ª–µ–µ) –¥–æ 15 (—Ç–µ–º–Ω–µ–µ)">
                      <InfoCircleOutlined />
                    </Tooltip>
                  </Space>
                }
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏' }]}
              >
                <InputNumber min={1} max={15} style={{ width: '100%' }} />
              </Form.Item>
            </Col>
          </Row>

          <Divider>–†–∞–∑–º–µ—Ä—ã —ç—Ç–∏–∫–µ—Ç–æ–∫</Divider>
          
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="labelWidth"
                label="–®–∏—Ä–∏–Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–∏ (–º–º)"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —ç—Ç–∏–∫–µ—Ç–∫–∏' }]}
              >
                <InputNumber min={10} max={200} style={{ width: '100%' }} />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="labelHeight"
                label="–í—ã—Å–æ—Ç–∞ —ç—Ç–∏–∫–µ—Ç–∫–∏ (–º–º)"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É —ç—Ç–∏–∫–µ—Ç–∫–∏' }]}
              >
                <InputNumber min={10} max={300} style={{ width: '100%' }} />
              </Form.Item>
            </Col>
          </Row>
        </Card>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <Card>
          <Space>
            <Button
              type="primary"
              icon={<SaveOutlined />}
              onClick={handleSave}
              loading={loading}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </Button>
            
            <Button
              icon={<ExperimentOutlined />}
              onClick={handleTest}
              loading={testing}
              disabled={!config.enabled}
            >
              –¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—á–∞—Ç—å
            </Button>
          </Space>
        </Card>
      </Form>
    </div>
  );
};